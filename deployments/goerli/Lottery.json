{
  "address": "0xc26840A995d19fE2344EBfa93fe5AFD996659135",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHToBuyATicket",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "Lottery__PerformUpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__StateIsNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "LotteryRequestedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "LotteryWinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "timeHasPassed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasPlayers",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasBalance",
          "type": "bool"
        }
      ],
      "name": "UpkeepNeeded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ddee8f91560265ed73ef6bad5f10f56405c3a2c509e606b3f6717f80b839ed1",
  "receipt": {
    "to": null,
    "from": "0x449daBbFEB5aaBc3a9477C02F47933B19250d72a",
    "contractAddress": "0xc26840A995d19fE2344EBfa93fe5AFD996659135",
    "transactionIndex": 119,
    "gasUsed": "746723",
    "logsBloom": "0x
    "blockHash": "0x15c96a642318632175b1e2c9a8a7e16b9dd524ad2e3a9d1cb0692cffa7d70827",
    "transactionHash": "0x7ddee8f91560265ed73ef6bad5f10f56405c3a2c509e606b3f6717f80b839ed1",
    "logs": [],
    "blockNumber": 8548388,
    "cumulativeGasUsed": "13269135",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "1000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    10173,
    500000,
    30
  ],
  "numDeployments": 4,
  "solcInputHash": "45e164ebda1939d044a7f00162069b66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHToBuyATicket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Lottery__PerformUpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__StateIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"LotteryRequestedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"LotteryWinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"timeHasPassed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPlayers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasBalance\",\"type\":\"bool\"}],\"name\":\"UpkeepNeeded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefania Pozzi\",\"details\":\"Chainlink VRF V2, Keepers \",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Chainlink keeper implementation Chainlink nodes checks if upkeepNeeded is true 1. Time is passed 2. Lottery is not computating 3. More than 1 player and Lottery contract must have positive balance 4. LINK in subscription balance for VRF\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract accepts an user buying a ticket. Then, every 30 seconds it selects a random winner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/test/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n/**\\n * @author Stefania Pozzi\\n * @notice This contract accepts an user buying a ticket.\\n * Then, every 30 seconds\\n * it selects a random winner\\n * @dev Chainlink VRF V2, Keepers\\n * */\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Types */\\n    enum LotteryState {\\n        OPEN,\\n        PROCESSING\\n    }\\n\\n    /* State variables */\\n    uint256 private immutable i_entranceFee; //why not immutable but storage\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private s_lastBlockTimestamp;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\n    uint256 private immutable i_interval;\\n\\n    /* Contract Variables */\\n    address private s_winner;\\n    LotteryState private s_lotteryState;\\n\\n    /* Errors and Events */\\n    error Lottery__NotEnoughETHToBuyATicket();\\n    error Lottery__TransferFailed();\\n    error Lottery__StateIsNotOpen();\\n    error Lottery__PerformUpkeepNotNeeded(uint256 balance, uint256 numPlayers, uint256 state);\\n\\n    event LotteryEnter(address indexed player);\\n    event LotteryRequestedWinner(uint256 indexed requestId);\\n    event LotteryWinnerPicked(address indexed winner);\\n    event UpkeepNeeded(bool isOpen,bool timeHasPassed,bool hasPlayers,bool hasBalance);\\n\\n    constructor(\\n        address vrfCoordinatorV2, //external contract: deploying mock\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState(0); //or LotteryState.OPEN\\n        s_lastBlockTimestamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughETHToBuyATicket();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__StateIsNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable winner = s_players[indexOfWinner];\\n        s_players = new address payable[](0);\\n        s_lastBlockTimestamp = block.timestamp;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_winner = winner;\\n\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit LotteryWinnerPicked(winner);\\n    }\\n\\n    /**\\n     * @dev Chainlink keeper implementation\\n     * Chainlink nodes checks if upkeepNeeded is true\\n     * 1. Time is passed\\n     * 2. Lottery is not computating\\n     * 3. More than 1 player and Lottery contract must have positive balance\\n     * 4. LINK in subscription balance for VRF\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\\n        bool timeHasPassed = (block.timestamp - s_lastBlockTimestamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = isOpen && timeHasPassed && hasPlayers && hasBalance;\\n        emit UpkeepNeeded(isOpen,timeHasPassed, hasPlayers, hasBalance);\\n\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__PerformUpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.PROCESSING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATION,\\n            uint32(i_callbackGasLimit),\\n            NUM_WORDS\\n        );\\n        emit LotteryRequestedWinner(requestId);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_winner;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return s_lastBlockTimestamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATION;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x7fb7a1349ddbe5e4527f0a5b695ae9f25e6639f151a305fb2e8a3594aac98e2f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b50604051610dd1380380610dd1833981016040819052610030916100b2565b606086901b6001600160601b031916608081905260a086905260c090815260e08581529084901b6001600160c01b0319166101005282901b6001600160e01b0319166101205260006002805460ff60a01b1916600160a01b83600181111561009a5761009a61013d565b02179055504260015561014052506101539350505050565b60008060008060008060c087890312156100cb57600080fd5b86516001600160a01b03811681146100e257600080fd5b6020880151604089015160608a015192985090965094506001600160401b038116811461010e57600080fd5b608088015190935063ffffffff8116811461012857600080fd5b8092505060a087015190509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051610c046101cd6000396000818161022d015261054e01526000610401015260006103ca015260006103a40152600061043f01526000818160d601526105fe01526000818161028e01526102d00152610c046000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461021e578063c1af578514610251578063f43b52cb14610259578063fd6673f51461026e57600080fd5b80635f1b0fd8146101b55780636b68c03c146101c95780636e04ff0d146101f057600080fd5b806309bc33a7146100c75780631fe543e3146101095780634585e33b1461012b578063460e20491461014b578063473f1ddc1461018357806353a2c19a146101a1575b600080fd5b3480156100d357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561011557600080fd5b506101296101243660046109d4565b610283565b005b34801561013757600080fd5b5061012961014636600461089b565b610310565b34801561015757600080fd5b5061016b6101663660046109a2565b6104ef565b6040516001600160a01b039091168152602001610100565b34801561018f57600080fd5b506002546001600160a01b031661016b565b3480156101ad57600080fd5b5060016100f6565b3480156101c157600080fd5b5060036100f6565b3480156101d557600080fd5b50600254600160a01b900460ff166040516101009190610aec565b3480156101fc57600080fd5b5061021061020b36600461090d565b61051e565b604051610100929190610a8d565b34801561022a57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f6565b6101296105fc565b34801561026557600080fd5b506001546100f6565b34801561027a57600080fd5b506000546100f6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103025760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61030c82826106e7565b5050565b600061032a6040518060200160405280600081525061051e565b5090508061038057600054600254479190600160a01b900460ff16600181111561035657610356610b8c565b6040516312ce08eb60e11b81526004810193909352602483019190915260448201526064016102f9565b60028054600160a01b60ff60a01b199091161790556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff166064820152600160848201526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906109bb565b60405190915081907f87e9e980e89d02ed1bfb229e02562db262b78c5fdfe0404b1b3d333a3fb4c6bd90600090a250505050565b600080828154811061050357610503610ba2565b6000918252602090912001546001600160a01b031692915050565b600060606000600260149054906101000a900460ff16600181111561054557610545610b8c565b600014905060007f00000000000000000000000000000000000000000000000000000000000000006001544261057b9190610b45565b6000549110915015154715158380156105915750825b801561059a5750815b80156105a35750805b604080518615158152851515602082015284151581830152831515606082015290519197507ff038df2b34bb2873c72580d9121c282ca8922e7ff27438145be692480cacc9e3919081900360800190a150505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561063d5760405163b35614e760e01b815260040160405180910390fd5b6000600254600160a01b900460ff16600181111561065d5761065d610b8c565b1461067b57604051637aaa1dfb60e01b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c91a2565b600080548251839083906106fd576106fd610ba2565b602002602001015161070f9190610b6a565b9050600080828154811061072557610725610ba2565b600091825260208083209190910154604080518481529283019081905291516001600160a01b03909116935061075c929190610821565b5042600155600280546001600160a81b0319166001600160a01b0383169081179091556040516000919047908381818185875af1925050503d80600081146107c0576040519150601f19603f3d011682016040523d82523d6000602084013e6107c5565b606091505b50509050806107e65760405162e4a00960e51b815260040160405180910390fd5b6040516001600160a01b038316907fb896f9276cf1b0dbe15c17dd5b14b9dc204c39d78658ea01c3db123fce01118390600090a25050505050565b828054828255906000526020600020908101928215610876579160200282015b8281111561087657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610841565b50610882929150610886565b5090565b5b808211156108825760008155600101610887565b600080602083850312156108ae57600080fd5b823567ffffffffffffffff808211156108c657600080fd5b818501915085601f8301126108da57600080fd5b8135818111156108e957600080fd5b8660208285010111156108fb57600080fd5b60209290920196919550909350505050565b6000602080838503121561092057600080fd5b823567ffffffffffffffff8082111561093857600080fd5b818501915085601f83011261094c57600080fd5b81358181111561095e5761095e610bb8565b610970601f8201601f19168501610b14565b9150808252868482850101111561098657600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156109b457600080fd5b5035919050565b6000602082840312156109cd57600080fd5b5051919050565b600080604083850312156109e757600080fd5b8235915060208084013567ffffffffffffffff80821115610a0757600080fd5b818601915086601f830112610a1b57600080fd5b813581811115610a2d57610a2d610bb8565b8060051b9150610a3e848301610b14565b8181528481019084860184860187018b1015610a5957600080fd5b600095505b83861015610a7c578035835260019590950194918601918601610a5e565b508096505050505050509250929050565b821515815260006020604081840152835180604085015260005b81811015610ac357858101830151858201606001528201610aa7565b81811115610ad5576000606083870101525b50601f01601f191692909201606001949350505050565b6020810160028310610b0e57634e487b7160e01b600052602160045260246000fd5b91905290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3d57610b3d610bb8565b604052919050565b600082821015610b6557634e487b7160e01b600052601160045260246000fd5b500390565b600082610b8757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e8c721c25403cc3182bb633ea68513cfdaf4eaafbed8d90d2ad7aa319625eb7c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461021e578063c1af578514610251578063f43b52cb14610259578063fd6673f51461026e57600080fd5b80635f1b0fd8146101b55780636b68c03c146101c95780636e04ff0d146101f057600080fd5b806309bc33a7146100c75780631fe543e3146101095780634585e33b1461012b578063460e20491461014b578063473f1ddc1461018357806353a2c19a146101a1575b600080fd5b3480156100d357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561011557600080fd5b506101296101243660046109d4565b610283565b005b34801561013757600080fd5b5061012961014636600461089b565b610310565b34801561015757600080fd5b5061016b6101663660046109a2565b6104ef565b6040516001600160a01b039091168152602001610100565b34801561018f57600080fd5b506002546001600160a01b031661016b565b3480156101ad57600080fd5b5060016100f6565b3480156101c157600080fd5b5060036100f6565b3480156101d557600080fd5b50600254600160a01b900460ff166040516101009190610aec565b3480156101fc57600080fd5b5061021061020b36600461090d565b61051e565b604051610100929190610a8d565b34801561022a57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f6565b6101296105fc565b34801561026557600080fd5b506001546100f6565b34801561027a57600080fd5b506000546100f6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103025760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61030c82826106e7565b5050565b600061032a6040518060200160405280600081525061051e565b5090508061038057600054600254479190600160a01b900460ff16600181111561035657610356610b8c565b6040516312ce08eb60e11b81526004810193909352602483019190915260448201526064016102f9565b60028054600160a01b60ff60a01b199091161790556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff166064820152600160848201526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906109bb565b60405190915081907f87e9e980e89d02ed1bfb229e02562db262b78c5fdfe0404b1b3d333a3fb4c6bd90600090a250505050565b600080828154811061050357610503610ba2565b6000918252602090912001546001600160a01b031692915050565b600060606000600260149054906101000a900460ff16600181111561054557610545610b8c565b600014905060007f00000000000000000000000000000000000000000000000000000000000000006001544261057b9190610b45565b6000549110915015154715158380156105915750825b801561059a5750815b80156105a35750805b604080518615158152851515602082015284151581830152831515606082015290519197507ff038df2b34bb2873c72580d9121c282ca8922e7ff27438145be692480cacc9e3919081900360800190a150505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561063d5760405163b35614e760e01b815260040160405180910390fd5b6000600254600160a01b900460ff16600181111561065d5761065d610b8c565b1461067b57604051637aaa1dfb60e01b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c91a2565b600080548251839083906106fd576106fd610ba2565b602002602001015161070f9190610b6a565b9050600080828154811061072557610725610ba2565b600091825260208083209190910154604080518481529283019081905291516001600160a01b03909116935061075c929190610821565b5042600155600280546001600160a81b0319166001600160a01b0383169081179091556040516000919047908381818185875af1925050503d80600081146107c0576040519150601f19603f3d011682016040523d82523d6000602084013e6107c5565b606091505b50509050806107e65760405162e4a00960e51b815260040160405180910390fd5b6040516001600160a01b038316907fb896f9276cf1b0dbe15c17dd5b14b9dc204c39d78658ea01c3db123fce01118390600090a25050505050565b828054828255906000526020600020908101928215610876579160200282015b8281111561087657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610841565b50610882929150610886565b5090565b5b808211156108825760008155600101610887565b600080602083850312156108ae57600080fd5b823567ffffffffffffffff808211156108c657600080fd5b818501915085601f8301126108da57600080fd5b8135818111156108e957600080fd5b8660208285010111156108fb57600080fd5b60209290920196919550909350505050565b6000602080838503121561092057600080fd5b823567ffffffffffffffff8082111561093857600080fd5b818501915085601f83011261094c57600080fd5b81358181111561095e5761095e610bb8565b610970601f8201601f19168501610b14565b9150808252868482850101111561098657600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156109b457600080fd5b5035919050565b6000602082840312156109cd57600080fd5b5051919050565b600080604083850312156109e757600080fd5b8235915060208084013567ffffffffffffffff80821115610a0757600080fd5b818601915086601f830112610a1b57600080fd5b813581811115610a2d57610a2d610bb8565b8060051b9150610a3e848301610b14565b8181528481019084860184860187018b1015610a5957600080fd5b600095505b83861015610a7c578035835260019590950194918601918601610a5e565b508096505050505050509250929050565b821515815260006020604081840152835180604085015260005b81811015610ac357858101830151858201606001528201610aa7565b81811115610ad5576000606083870101525b50601f01601f191692909201606001949350505050565b6020810160028310610b0e57634e487b7160e01b600052602160045260246000fd5b91905290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3d57610b3d610bb8565b604052919050565b600082821015610b6557634e487b7160e01b600052601160045260246000fd5b500390565b600082610b8757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e8c721c25403cc3182bb633ea68513cfdaf4eaafbed8d90d2ad7aa319625eb7c64736f6c63430008070033",
  "devdoc": {
    "author": "Stefania Pozzi",
    "details": "Chainlink VRF V2, Keepers ",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "Chainlink keeper implementation Chainlink nodes checks if upkeepNeeded is true 1. Time is passed 2. Lottery is not computating 3. More than 1 player and Lottery contract must have positive balance 4. LINK in subscription balance for VRF"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract accepts an user buying a ticket. Then, every 30 seconds it selects a random winner",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 190,
        "contract": "contracts/test/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 201,
        "contract": "contracts/test/Lottery.sol:Lottery",
        "label": "s_lastBlockTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 211,
        "contract": "contracts/test/Lottery.sol:Lottery",
        "label": "s_winner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 214,
        "contract": "contracts/test/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(LotteryState)185"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)185": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}