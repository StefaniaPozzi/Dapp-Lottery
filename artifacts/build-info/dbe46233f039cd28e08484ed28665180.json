{"id":"dbe46233f039cd28e08484ed28665180","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/test/Lottery.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\n\n/**\n * @author Stefania Pozzi\n * @notice This contract accepts an user buying a ticket.\n * Then, every 30 seconds\n * it selects a random winner\n * @dev Chainlink VRF V2, Keepers\n * */\n\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\n    /* Types */\n    enum LotteryState {\n        OPEN,\n        PROCESSING\n    }\n\n    /* State variables */\n    uint256 private immutable i_entranceFee; //why not immutable but storage\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint256 private s_lastBlockTimestamp;\n    uint32 private constant NUM_WORDS = 1;\n    uint16 private constant REQUEST_CONFIRMATION = 3;\n    uint256 private immutable i_interval;\n\n    /* Contract Variables */\n    address private s_winner;\n    LotteryState private s_lotteryState;\n\n    /* Errors and Events */\n    error Lottery__NotEnoughETHToBuyATicket();\n    error Lottery__TransferFailed();\n    error Lottery__StateIsNotOpen();\n    error Lottery__PerformUpkeepNotNeeded(uint256 balance, uint256 numPlayers, uint256 state);\n\n    event LotteryEnter(address indexed player);\n    event LotteryRequestedWinner(uint256 indexed requestId);\n    event LotteryWinnerPicked(address indexed winner);\n    event UpkeepNeeded(bool isOpen,bool timeHasPassed,bool hasPlayers,bool hasBalance);\n\n    constructor(\n        address vrfCoordinatorV2, //external contract: deploying mock\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_lotteryState = LotteryState(0); //or LotteryState.OPEN\n        s_lastBlockTimestamp = block.timestamp;\n        i_interval = interval;\n    }\n\n    function enterLottery() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Lottery__NotEnoughETHToBuyATicket();\n        }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__StateIsNotOpen();\n        }\n        s_players.push(payable(msg.sender));\n        emit LotteryEnter(msg.sender);\n    }\n\n    function fulfillRandomWords(\n        uint256 /*requestId*/,\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        address payable winner = s_players[indexOfWinner];\n        s_players = new address payable[](0);\n        s_lastBlockTimestamp = block.timestamp;\n        s_lotteryState = LotteryState.OPEN;\n        s_winner = winner;\n\n        (bool success, ) = winner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Lottery__TransferFailed();\n        }\n        emit LotteryWinnerPicked(winner);\n    }\n\n    /**\n     * @dev Chainlink keeper implementation\n     * Chainlink nodes checks if upkeepNeeded is true\n     * 1. Time is passed\n     * 2. Lottery is not computating\n     * 3. More than 1 player and Lottery contract must have positive balance\n     * 4. LINK in subscription balance for VRF\n     */\n    function checkUpkeep(\n        bytes memory /* checkData */\n    ) public override returns (bool upkeepNeeded, bytes memory /* performData */) {\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\n        bool timeHasPassed = (block.timestamp - s_lastBlockTimestamp) > i_interval;\n        bool hasPlayers = s_players.length > 0;\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = isOpen && timeHasPassed && hasPlayers && hasBalance;\n        emit UpkeepNeeded(isOpen,timeHasPassed, hasPlayers, hasBalance);\n\n    }\n\n    function performUpkeep(bytes calldata /*performData*/) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert Lottery__PerformUpkeepNotNeeded(\n                address(this).balance,\n                s_players.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lotteryState = LotteryState.PROCESSING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATION,\n            uint32(i_callbackGasLimit),\n            NUM_WORDS\n        );\n        emit LotteryRequestedWinner(requestId);\n    }\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayers(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_winner;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getLatestTimestamp() public view returns (uint256) {\n        return s_lastBlockTimestamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATION;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumberOfPlayers() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/test/Lottery.sol:108:51:\n    |\n108 |     ) public override returns (bool upkeepNeeded, bytes memory /* performData */) {\n    |                                                   ^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":3801,"file":"contracts/test/Lottery.sol","start":3789},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[76]},"id":77,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":76,"linearizedBaseContracts":[76],"name":"AutomationCompatibleInterface","nameLocation":"67:29:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"101:985:1","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:1","nodeType":"VariableDeclaration","scope":69,"src":"1110:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:1","nodeType":"VariableDeclaration","scope":69,"src":"1154:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"performData","nameLocation":"1186:11:1","nodeType":"VariableDeclaration","scope":69,"src":"1173:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":66,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:1"},"scope":76,"src":"1089:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1203:1003:1","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"performData","nameLocation":"2247:11:1","nodeType":"VariableDeclaration","scope":75,"src":"2232:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":71,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2268:0:1"},"scope":76,"src":"2209:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":77,"src":"57:2214:1","usedErrors":[]}],"src":"32:2240:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[172]},"id":173,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":78,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":172,"linearizedBaseContracts":[172],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"97:267:2","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":89,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:2","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"392:2:2"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"437:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":81,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"451:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":83,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"465:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":85,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":86,"nodeType":"ArrayTypeName","src":"465:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:2"},"scope":172,"src":"367:121:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"492:1511:2","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":105,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:2","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:2","nodeType":"VariableDeclaration","scope":105,"src":"2039:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":91,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"subId","nameLocation":"2067:5:2","nodeType":"VariableDeclaration","scope":105,"src":"2060:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":93,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:2","nodeType":"VariableDeclaration","scope":105,"src":"2078:34:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":95,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:2","nodeType":"VariableDeclaration","scope":105,"src":"2118:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":97,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:2","nodeType":"VariableDeclaration","scope":105,"src":"2147:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":99,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:2"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:2","nodeType":"VariableDeclaration","scope":105,"src":"2185:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:2"},"scope":172,"src":"2006:198:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2208:384:2","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":111,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:2","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"2622:2:2"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"subId","nameLocation":"2650:5:2","nodeType":"VariableDeclaration","scope":111,"src":"2643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":108,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:2"},"scope":172,"src":"2595:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"2661:381:2","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:2","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"subId","nameLocation":"3077:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3070:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":113,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:2"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"balance","nameLocation":"3133:7:2","nodeType":"VariableDeclaration","scope":126,"src":"3126:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":116,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:2","nodeType":"VariableDeclaration","scope":126,"src":"3148:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":118,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"owner","nameLocation":"3179:5:2","nodeType":"VariableDeclaration","scope":126,"src":"3171:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:2","nodeType":"VariableDeclaration","scope":126,"src":"3192:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":123,"nodeType":"ArrayTypeName","src":"3192:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:2"},"scope":172,"src":"3045:180:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"3229:164:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":134,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:2","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"subId","nameLocation":"3445:5:2","nodeType":"VariableDeclaration","scope":134,"src":"3438:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":128,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:2","nodeType":"VariableDeclaration","scope":134,"src":"3452:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:2"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"3478:0:2"},"scope":172,"src":"3396:83:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"3483:212:2","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"subId","nameLocation":"3746:5:2","nodeType":"VariableDeclaration","scope":140,"src":"3739:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":136,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:2"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"3761:0:2"},"scope":172,"src":"3698:64:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"3766:170:2","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:2","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"subId","nameLocation":"3967:5:2","nodeType":"VariableDeclaration","scope":148,"src":"3960:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":142,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:2","nodeType":"VariableDeclaration","scope":148,"src":"3974:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:2"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"4000:0:2"},"scope":172,"src":"3939:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"4005:172:2","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":156,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:2","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"subId","nameLocation":"4211:5:2","nodeType":"VariableDeclaration","scope":156,"src":"4204:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":150,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:2","nodeType":"VariableDeclaration","scope":156,"src":"4218:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"4244:0:2"},"scope":172,"src":"4180:65:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"4249:140:2","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":164,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:2","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"subId","nameLocation":"4427:5:2","nodeType":"VariableDeclaration","scope":164,"src":"4420:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":158,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"to","nameLocation":"4442:2:2","nodeType":"VariableDeclaration","scope":164,"src":"4434:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:2"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"4454:0:2"},"scope":172,"src":"4392:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":171,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:2","nodeType":"FunctionDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"subId","nameLocation":"4788:5:2","nodeType":"VariableDeclaration","scope":171,"src":"4781:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":165,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:2"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":171,"src":"4818:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":168,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:2"},"scope":172,"src":"4751:73:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":173,"src":"57:4769:2","usedErrors":[]}],"src":"32:4795:2"},"id":2},"contracts/test/Lottery.sol":{"ast":{"absolutePath":"contracts/test/Lottery.sol","exportedSymbols":{"AutomationCompatibleInterface":[76],"Lottery":[610],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[172]},"id":611,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":174,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":611,"sourceUnit":173,"src":"58:80:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":611,"sourceUnit":58,"src":"139:61:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","id":177,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":611,"sourceUnit":77,"src":"201:84:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":179,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"492:17:3"},"id":180,"nodeType":"InheritanceSpecifier","src":"492:17:3"},{"baseName":{"id":181,"name":"AutomationCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":76,"src":"511:29:3"},"id":182,"nodeType":"InheritanceSpecifier","src":"511:29:3"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"287:183:3","text":" @author Stefania Pozzi\n @notice This contract accepts an user buying a ticket.\n Then, every 30 seconds\n it selects a random winner\n @dev Chainlink VRF V2, Keepers\n "},"fullyImplemented":true,"id":610,"linearizedBaseContracts":[610,76,57],"name":"Lottery","nameLocation":"481:7:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Lottery.LotteryState","id":185,"members":[{"id":183,"name":"OPEN","nameLocation":"591:4:3","nodeType":"EnumValue","src":"591:4:3"},{"id":184,"name":"PROCESSING","nameLocation":"605:10:3","nodeType":"EnumValue","src":"605:10:3"}],"name":"LotteryState","nameLocation":"568:12:3","nodeType":"EnumDefinition","src":"563:58:3"},{"constant":false,"id":187,"mutability":"immutable","name":"i_entranceFee","nameLocation":"679:13:3","nodeType":"VariableDeclaration","scope":610,"src":"653:39:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"653:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":190,"mutability":"mutable","name":"s_players","nameLocation":"756:9:3","nodeType":"VariableDeclaration","scope":610,"src":"730:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"730:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":189,"nodeType":"ArrayTypeName","src":"730:17:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":193,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"815:16:3","nodeType":"VariableDeclaration","scope":610,"src":"771:60:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":192,"nodeType":"UserDefinedTypeName","pathNode":{"id":191,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":172,"src":"771:25:3"},"referencedDeclaration":172,"src":"771:25:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":195,"mutability":"immutable","name":"i_gasLane","nameLocation":"863:9:3","nodeType":"VariableDeclaration","scope":610,"src":"837:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"837:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":197,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"903:16:3","nodeType":"VariableDeclaration","scope":610,"src":"878:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":196,"name":"uint64","nodeType":"ElementaryTypeName","src":"878:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":199,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"950:18:3","nodeType":"VariableDeclaration","scope":610,"src":"925:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":198,"name":"uint32","nodeType":"ElementaryTypeName","src":"925:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":false,"id":201,"mutability":"mutable","name":"s_lastBlockTimestamp","nameLocation":"990:20:3","nodeType":"VariableDeclaration","scope":610,"src":"974:36:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"id":204,"mutability":"constant","name":"NUM_WORDS","nameLocation":"1040:9:3","nodeType":"VariableDeclaration","scope":610,"src":"1016:37:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":202,"name":"uint32","nodeType":"ElementaryTypeName","src":"1016:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1052:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":207,"mutability":"constant","name":"REQUEST_CONFIRMATION","nameLocation":"1083:20:3","nodeType":"VariableDeclaration","scope":610,"src":"1059:48:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":205,"name":"uint16","nodeType":"ElementaryTypeName","src":"1059:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1106:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":209,"mutability":"immutable","name":"i_interval","nameLocation":"1139:10:3","nodeType":"VariableDeclaration","scope":610,"src":"1113:36:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint256","nodeType":"ElementaryTypeName","src":"1113:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":211,"mutability":"mutable","name":"s_winner","nameLocation":"1201:8:3","nodeType":"VariableDeclaration","scope":610,"src":"1185:24:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":210,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":214,"mutability":"mutable","name":"s_lotteryState","nameLocation":"1236:14:3","nodeType":"VariableDeclaration","scope":610,"src":"1215:35:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"},"typeName":{"id":213,"nodeType":"UserDefinedTypeName","pathNode":{"id":212,"name":"LotteryState","nodeType":"IdentifierPath","referencedDeclaration":185,"src":"1215:12:3"},"referencedDeclaration":185,"src":"1215:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"visibility":"private"},{"id":216,"name":"Lottery__NotEnoughETHToBuyATicket","nameLocation":"1291:33:3","nodeType":"ErrorDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[],"src":"1324:2:3"},"src":"1285:42:3"},{"id":218,"name":"Lottery__TransferFailed","nameLocation":"1338:23:3","nodeType":"ErrorDefinition","parameters":{"id":217,"nodeType":"ParameterList","parameters":[],"src":"1361:2:3"},"src":"1332:32:3"},{"id":220,"name":"Lottery__StateIsNotOpen","nameLocation":"1375:23:3","nodeType":"ErrorDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"1398:2:3"},"src":"1369:32:3"},{"id":228,"name":"Lottery__PerformUpkeepNotNeeded","nameLocation":"1412:31:3","nodeType":"ErrorDefinition","parameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"balance","nameLocation":"1452:7:3","nodeType":"VariableDeclaration","scope":228,"src":"1444:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1444:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"numPlayers","nameLocation":"1469:10:3","nodeType":"VariableDeclaration","scope":228,"src":"1461:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1461:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":226,"mutability":"mutable","name":"state","nameLocation":"1489:5:3","nodeType":"VariableDeclaration","scope":228,"src":"1481:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":225,"name":"uint256","nodeType":"ElementaryTypeName","src":"1481:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1443:52:3"},"src":"1406:90:3"},{"anonymous":false,"id":232,"name":"LotteryEnter","nameLocation":"1508:12:3","nodeType":"EventDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1537:6:3","nodeType":"VariableDeclaration","scope":232,"src":"1521:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"1521:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1520:24:3"},"src":"1502:43:3"},{"anonymous":false,"id":236,"name":"LotteryRequestedWinner","nameLocation":"1556:22:3","nodeType":"EventDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1595:9:3","nodeType":"VariableDeclaration","scope":236,"src":"1579:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"1579:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1578:27:3"},"src":"1550:56:3"},{"anonymous":false,"id":240,"name":"LotteryWinnerPicked","nameLocation":"1617:19:3","nodeType":"EventDefinition","parameters":{"id":239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1653:6:3","nodeType":"VariableDeclaration","scope":240,"src":"1637:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":237,"name":"address","nodeType":"ElementaryTypeName","src":"1637:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1636:24:3"},"src":"1611:50:3"},{"anonymous":false,"id":250,"name":"UpkeepNeeded","nameLocation":"1672:12:3","nodeType":"EventDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"indexed":false,"mutability":"mutable","name":"isOpen","nameLocation":"1690:6:3","nodeType":"VariableDeclaration","scope":250,"src":"1685:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":241,"name":"bool","nodeType":"ElementaryTypeName","src":"1685:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":244,"indexed":false,"mutability":"mutable","name":"timeHasPassed","nameLocation":"1702:13:3","nodeType":"VariableDeclaration","scope":250,"src":"1697:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":243,"name":"bool","nodeType":"ElementaryTypeName","src":"1697:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":246,"indexed":false,"mutability":"mutable","name":"hasPlayers","nameLocation":"1721:10:3","nodeType":"VariableDeclaration","scope":250,"src":"1716:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":245,"name":"bool","nodeType":"ElementaryTypeName","src":"1716:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":248,"indexed":false,"mutability":"mutable","name":"hasBalance","nameLocation":"1737:10:3","nodeType":"VariableDeclaration","scope":250,"src":"1732:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":247,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1684:64:3"},"src":"1666:83:3"},{"body":{"id":305,"nodeType":"Block","src":"2023:379:3","statements":[{"expression":{"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":268,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2033:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":269,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"2049:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2033:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":271,"nodeType":"ExpressionStatement","src":"2033:27:3"},{"expression":{"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":272,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2070:16:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":274,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2115:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":273,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"2089:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$172_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2089:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"src":"2070:62:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"id":277,"nodeType":"ExpressionStatement","src":"2070:62:3"},{"expression":{"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":278,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2142:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":279,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"2154:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2142:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":281,"nodeType":"ExpressionStatement","src":"2142:19:3"},{"expression":{"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":282,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"2171:16:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":283,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2190:14:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2171:33:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":285,"nodeType":"ExpressionStatement","src":"2171:33:3"},{"expression":{"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":286,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"2214:18:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":287,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"2235:16:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2214:37:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":289,"nodeType":"ExpressionStatement","src":"2214:37:3"},{"expression":{"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":290,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2261:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2291:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":291,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2278:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$185_$","typeString":"type(enum Lottery.LotteryState)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2278:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"src":"2261:32:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"id":295,"nodeType":"ExpressionStatement","src":"2261:32:3"},{"expression":{"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":296,"name":"s_lastBlockTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"2326:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":297,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2349:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2349:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2326:38:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":300,"nodeType":"ExpressionStatement","src":"2326:38:3"},{"expression":{"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":301,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2374:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":302,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2387:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2374:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":304,"nodeType":"ExpressionStatement","src":"2374:21:3"}]},"id":306,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":265,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2005:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":266,"kind":"baseConstructorSpecifier","modifierName":{"id":264,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1987:17:3"},"nodeType":"ModifierInvocation","src":"1987:35:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1784:16:3","nodeType":"VariableDeclaration","scope":306,"src":"1776:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"1776:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"entranceFee","nameLocation":"1854:11:3","nodeType":"VariableDeclaration","scope":306,"src":"1846:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"gasLane","nameLocation":"1883:7:3","nodeType":"VariableDeclaration","scope":306,"src":"1875:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":255,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1875:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"subscriptionId","nameLocation":"1907:14:3","nodeType":"VariableDeclaration","scope":306,"src":"1900:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":257,"name":"uint64","nodeType":"ElementaryTypeName","src":"1900:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1938:16:3","nodeType":"VariableDeclaration","scope":306,"src":"1931:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":259,"name":"uint32","nodeType":"ElementaryTypeName","src":"1931:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":262,"mutability":"mutable","name":"interval","nameLocation":"1972:8:3","nodeType":"VariableDeclaration","scope":306,"src":"1964:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"1964:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1766:220:3"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"2023:0:3"},"scope":610,"src":"1755:647:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":342,"nodeType":"Block","src":"2447:305:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":309,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2461:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2461:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":311,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2473:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2461:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":317,"nodeType":"IfStatement","src":"2457:98:3","trueBody":{"id":316,"nodeType":"Block","src":"2488:67:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":313,"name":"Lottery__NotEnoughETHToBuyATicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2509:33:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2509:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":315,"nodeType":"RevertStatement","src":"2502:42:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2568:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":319,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2586:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$185_$","typeString":"type(enum Lottery.LotteryState)"}},"id":320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":183,"src":"2586:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"src":"2568:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":326,"nodeType":"IfStatement","src":"2564:98:3","trueBody":{"id":325,"nodeType":"Block","src":"2605:57:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"Lottery__StateIsNotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"2626:23:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2626:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":324,"nodeType":"RevertStatement","src":"2619:32:3"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":332,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2694:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2694:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2686:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"2686:8:3","stateMutability":"payable","typeDescriptions":{}}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2686:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":327,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2671:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2671:14:3","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2671:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":336,"nodeType":"ExpressionStatement","src":"2671:35:3"},{"eventCall":{"arguments":[{"expression":{"id":338,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2734:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2734:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":337,"name":"LotteryEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2721:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2721:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"EmitStatement","src":"2716:29:3"}]},"functionSelector":"c1af5785","id":343,"implemented":true,"kind":"function","modifiers":[],"name":"enterLottery","nameLocation":"2417:12:3","nodeType":"FunctionDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"2429:2:3"},"returnParameters":{"id":308,"nodeType":"ParameterList","parameters":[],"src":"2447:0:3"},"scope":610,"src":"2408:344:3","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[30],"body":{"id":413,"nodeType":"Block","src":"2879:495:3","statements":[{"assignments":[353],"declarations":[{"constant":false,"id":353,"mutability":"mutable","name":"indexOfWinner","nameLocation":"2897:13:3","nodeType":"VariableDeclaration","scope":413,"src":"2889:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"2889:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":360,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":354,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"2913:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":356,"indexExpression":{"hexValue":"30","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2925:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2913:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":357,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2930:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2930:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2913:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2889:57:3"},{"assignments":[362],"declarations":[{"constant":false,"id":362,"mutability":"mutable","name":"winner","nameLocation":"2972:6:3","nodeType":"VariableDeclaration","scope":413,"src":"2956:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":361,"name":"address","nodeType":"ElementaryTypeName","src":"2956:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":366,"initialValue":{"baseExpression":{"id":363,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2981:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":365,"indexExpression":{"id":364,"name":"indexOfWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"2991:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2981:24:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"2956:49:3"},{"expression":{"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":367,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"3015:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3049:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3027:21:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"3031:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":369,"nodeType":"ArrayTypeName","src":"3031:17:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3027:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"3015:36:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":374,"nodeType":"ExpressionStatement","src":"3015:36:3"},{"expression":{"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":375,"name":"s_lastBlockTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"3061:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":376,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3084:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3084:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3061:38:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":379,"nodeType":"ExpressionStatement","src":"3061:38:3"},{"expression":{"id":383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":380,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"3109:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":381,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"3126:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$185_$","typeString":"type(enum Lottery.LotteryState)"}},"id":382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":183,"src":"3126:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"src":"3109:34:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"id":384,"nodeType":"ExpressionStatement","src":"3109:34:3"},{"expression":{"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":385,"name":"s_winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"3153:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":386,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3164:6:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3153:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":388,"nodeType":"ExpressionStatement","src":"3153:17:3"},{"assignments":[390,null],"declarations":[{"constant":false,"id":390,"mutability":"mutable","name":"success","nameLocation":"3187:7:3","nodeType":"VariableDeclaration","scope":413,"src":"3182:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":389,"name":"bool","nodeType":"ElementaryTypeName","src":"3182:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":401,"initialValue":{"arguments":[{"hexValue":"","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3242:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":391,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3200:6:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"3200:11:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":395,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3227:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Lottery_$610","typeString":"contract Lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lottery_$610","typeString":"contract Lottery"}],"id":394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3219:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":393,"name":"address","nodeType":"ElementaryTypeName","src":"3219:7:3","typeDescriptions":{}}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3219:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"3219:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3200:41:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3200:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3181:64:3"},{"condition":{"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3259:8:3","subExpression":{"id":402,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3260:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":408,"nodeType":"IfStatement","src":"3255:71:3","trueBody":{"id":407,"nodeType":"Block","src":"3269:57:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":404,"name":"Lottery__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3290:23:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3290:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":406,"nodeType":"RevertStatement","src":"3283:32:3"}]}},{"eventCall":{"arguments":[{"id":410,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3360:6:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":409,"name":"LotteryWinnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"3340:19:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3340:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":412,"nodeType":"EmitStatement","src":"3335:32:3"}]},"id":414,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2767:18:3","nodeType":"FunctionDefinition","overrides":{"id":350,"nodeType":"OverrideSpecifier","overrides":[],"src":"2870:8:3"},"parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":345,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":414,"src":"2795:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2795:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"randomWords","nameLocation":"2843:11:3","nodeType":"VariableDeclaration","scope":414,"src":"2826:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"2826:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":347,"nodeType":"ArrayTypeName","src":"2826:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2785:75:3"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"2879:0:3"},"scope":610,"src":"2758:616:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[69],"body":{"id":476,"nodeType":"Block","src":"3821:401:3","statements":[{"assignments":[426],"declarations":[{"constant":false,"id":426,"mutability":"mutable","name":"isOpen","nameLocation":"3836:6:3","nodeType":"VariableDeclaration","scope":476,"src":"3831:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":425,"name":"bool","nodeType":"ElementaryTypeName","src":"3831:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":431,"initialValue":{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":427,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"3845:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$185_$","typeString":"type(enum Lottery.LotteryState)"}},"id":428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":183,"src":"3845:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":429,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"3866:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"src":"3845:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3831:49:3"},{"assignments":[433],"declarations":[{"constant":false,"id":433,"mutability":"mutable","name":"timeHasPassed","nameLocation":"3895:13:3","nodeType":"VariableDeclaration","scope":476,"src":"3890:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":432,"name":"bool","nodeType":"ElementaryTypeName","src":"3890:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":441,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":434,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3912:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3912:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":436,"name":"s_lastBlockTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"3930:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3912:38:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":438,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3911:40:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":439,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"3954:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3911:53:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3890:74:3"},{"assignments":[443],"declarations":[{"constant":false,"id":443,"mutability":"mutable","name":"hasPlayers","nameLocation":"3979:10:3","nodeType":"VariableDeclaration","scope":476,"src":"3974:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":442,"name":"bool","nodeType":"ElementaryTypeName","src":"3974:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":448,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":444,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"3992:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3992:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4011:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3992:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3974:38:3"},{"assignments":[450],"declarations":[{"constant":false,"id":450,"mutability":"mutable","name":"hasBalance","nameLocation":"4027:10:3","nodeType":"VariableDeclaration","scope":476,"src":"4022:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":449,"name":"bool","nodeType":"ElementaryTypeName","src":"4022:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":458,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":453,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4048:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Lottery_$610","typeString":"contract Lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lottery_$610","typeString":"contract Lottery"}],"id":452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4040:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"4040:7:3","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4040:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"4040:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4064:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4040:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4022:43:3"},{"expression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":459,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4075:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":460,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4090:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":461,"name":"timeHasPassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"4100:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4090:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":463,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"4117:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4090:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":465,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"4131:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4090:51:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4075:66:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":468,"nodeType":"ExpressionStatement","src":"4075:66:3"},{"eventCall":{"arguments":[{"id":470,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4169:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":471,"name":"timeHasPassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"4176:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":472,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"4191:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":473,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"4203:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":469,"name":"UpkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"4156:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$_t_bool_$_t_bool_$_t_bool_$returns$__$","typeString":"function (bool,bool,bool,bool)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4156:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":475,"nodeType":"EmitStatement","src":"4151:63:3"}]},"documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"3380:295:3","text":" @dev Chainlink keeper implementation\n Chainlink nodes checks if upkeepNeeded is true\n 1. Time is passed\n 2. Lottery is not computating\n 3. More than 1 player and Lottery contract must have positive balance\n 4. LINK in subscription balance for VRF"},"functionSelector":"6e04ff0d","id":477,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"3689:11:3","nodeType":"FunctionDefinition","overrides":{"id":419,"nodeType":"OverrideSpecifier","overrides":[],"src":"3752:8:3"},"parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":477,"src":"3710:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":416,"name":"bytes","nodeType":"ElementaryTypeName","src":"3710:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3700:44:3"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"3775:12:3","nodeType":"VariableDeclaration","scope":477,"src":"3770:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"3770:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":477,"src":"3789:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":422,"name":"bytes","nodeType":"ElementaryTypeName","src":"3789:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3769:51:3"},"scope":610,"src":"3680:542:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[75],"body":{"id":530,"nodeType":"Block","src":"4301:598:3","statements":[{"assignments":[484,null],"declarations":[{"constant":false,"id":484,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"4317:12:3","nodeType":"VariableDeclaration","scope":530,"src":"4312:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":483,"name":"bool","nodeType":"ElementaryTypeName","src":"4312:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":488,"initialValue":{"arguments":[{"hexValue":"","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4347:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":485,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"4335:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4335:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4311:39:3"},{"condition":{"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4364:13:3","subExpression":{"id":489,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"4365:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":506,"nodeType":"IfStatement","src":"4360:210:3","trueBody":{"id":505,"nodeType":"Block","src":"4379:191:3","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":494,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4457:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Lottery_$610","typeString":"contract Lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lottery_$610","typeString":"contract Lottery"}],"id":493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4449:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"4449:7:3","typeDescriptions":{}}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4449:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"4449:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":497,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"4488:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4488:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":501,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"4530:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}],"id":500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4522:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":499,"name":"uint256","nodeType":"ElementaryTypeName","src":"4522:7:3","typeDescriptions":{}}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4522:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":491,"name":"Lottery__PerformUpkeepNotNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"4400:31:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4400:159:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":504,"nodeType":"RevertStatement","src":"4393:166:3"}]}},{"expression":{"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":507,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"4579:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":508,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"4596:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$185_$","typeString":"type(enum Lottery.LotteryState)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"PROCESSING","nodeType":"MemberAccess","referencedDeclaration":184,"src":"4596:23:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"src":"4579:40:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"id":511,"nodeType":"ExpressionStatement","src":"4579:40:3"},{"assignments":[513],"declarations":[{"constant":false,"id":513,"mutability":"mutable","name":"requestId","nameLocation":"4637:9:3","nodeType":"VariableDeclaration","scope":530,"src":"4629:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":512,"name":"uint256","nodeType":"ElementaryTypeName","src":"4629:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":525,"initialValue":{"arguments":[{"id":516,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"4698:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":517,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"4721:16:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":518,"name":"REQUEST_CONFIRMATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"4751:20:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"arguments":[{"id":521,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4792:18:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4785:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":519,"name":"uint32","nodeType":"ElementaryTypeName","src":"4785:6:3","typeDescriptions":{}}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4785:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":523,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"4825:9:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":514,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4649:16:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$172","typeString":"contract VRFCoordinatorV2Interface"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":105,"src":"4649:35:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4649:195:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4629:215:3"},{"eventCall":{"arguments":[{"id":527,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"4882:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":526,"name":"LotteryRequestedWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"4859:22:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4859:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":529,"nodeType":"EmitStatement","src":"4854:38:3"}]},"functionSelector":"4585e33b","id":531,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"4237:13:3","nodeType":"FunctionDefinition","overrides":{"id":481,"nodeType":"OverrideSpecifier","overrides":[],"src":"4292:8:3"},"parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":531,"src":"4251:14:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":478,"name":"bytes","nodeType":"ElementaryTypeName","src":"4251:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4250:32:3"},"returnParameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"4301:0:3"},"scope":610,"src":"4228:671:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":538,"nodeType":"Block","src":"4961:37:3","statements":[{"expression":{"id":536,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"4978:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":535,"id":537,"nodeType":"Return","src":"4971:20:3"}]},"functionSelector":"09bc33a7","id":539,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"4914:14:3","nodeType":"FunctionDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"4928:2:3"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":539,"src":"4952:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":533,"name":"uint256","nodeType":"ElementaryTypeName","src":"4952:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4951:9:3"},"scope":610,"src":"4905:93:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":550,"nodeType":"Block","src":"5069:40:3","statements":[{"expression":{"baseExpression":{"id":546,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"5086:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":548,"indexExpression":{"id":547,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"5096:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5086:16:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":545,"id":549,"nodeType":"Return","src":"5079:23:3"}]},"functionSelector":"460e2049","id":551,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayers","nameLocation":"5013:10:3","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"index","nameLocation":"5032:5:3","nodeType":"VariableDeclaration","scope":551,"src":"5024:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":540,"name":"uint256","nodeType":"ElementaryTypeName","src":"5024:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5023:15:3"},"returnParameters":{"id":545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":551,"src":"5060:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"5060:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5059:9:3"},"scope":610,"src":"5004:105:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":558,"nodeType":"Block","src":"5172:32:3","statements":[{"expression":{"id":556,"name":"s_winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"5189:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":555,"id":557,"nodeType":"Return","src":"5182:15:3"}]},"functionSelector":"473f1ddc","id":559,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"5124:15:3","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[],"src":"5139:2:3"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":559,"src":"5163:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"5163:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5162:9:3"},"scope":610,"src":"5115:89:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":566,"nodeType":"Block","src":"5263:33:3","statements":[{"expression":{"id":564,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"5280:9:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":563,"id":565,"nodeType":"Return","src":"5273:16:3"}]},"functionSelector":"53a2c19a","id":567,"implemented":true,"kind":"function","modifiers":[],"name":"getNumWords","nameLocation":"5219:11:3","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"5230:2:3"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":567,"src":"5254:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":561,"name":"uint256","nodeType":"ElementaryTypeName","src":"5254:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5253:9:3"},"scope":610,"src":"5210:86:3","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":574,"nodeType":"Block","src":"5362:44:3","statements":[{"expression":{"id":572,"name":"s_lastBlockTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"5379:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":571,"id":573,"nodeType":"Return","src":"5372:27:3"}]},"functionSelector":"f43b52cb","id":575,"implemented":true,"kind":"function","modifiers":[],"name":"getLatestTimestamp","nameLocation":"5311:18:3","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"5329:2:3"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":575,"src":"5353:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"5353:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5352:9:3"},"scope":610,"src":"5302:104:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":582,"nodeType":"Block","src":"5477:44:3","statements":[{"expression":{"id":580,"name":"REQUEST_CONFIRMATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"5494:20:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":579,"id":581,"nodeType":"Return","src":"5487:27:3"}]},"functionSelector":"5f1b0fd8","id":583,"implemented":true,"kind":"function","modifiers":[],"name":"getRequestConfirmations","nameLocation":"5421:23:3","nodeType":"FunctionDefinition","parameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"5444:2:3"},"returnParameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":583,"src":"5468:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":577,"name":"uint256","nodeType":"ElementaryTypeName","src":"5468:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5467:9:3"},"scope":610,"src":"5412:109:3","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":591,"nodeType":"Block","src":"5589:38:3","statements":[{"expression":{"id":589,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"5606:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"functionReturnParameters":588,"id":590,"nodeType":"Return","src":"5599:21:3"}]},"functionSelector":"6b68c03c","id":592,"implemented":true,"kind":"function","modifiers":[],"name":"getLotteryState","nameLocation":"5536:15:3","nodeType":"FunctionDefinition","parameters":{"id":584,"nodeType":"ParameterList","parameters":[],"src":"5551:2:3"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"5575:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"},"typeName":{"id":586,"nodeType":"UserDefinedTypeName","pathNode":{"id":585,"name":"LotteryState","nodeType":"IdentifierPath","referencedDeclaration":185,"src":"5575:12:3"},"referencedDeclaration":185,"src":"5575:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$185","typeString":"enum Lottery.LotteryState"}},"visibility":"internal"}],"src":"5574:14:3"},"scope":610,"src":"5527:100:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":600,"nodeType":"Block","src":"5693:40:3","statements":[{"expression":{"expression":{"id":597,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"5710:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5710:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":596,"id":599,"nodeType":"Return","src":"5703:23:3"}]},"functionSelector":"fd6673f5","id":601,"implemented":true,"kind":"function","modifiers":[],"name":"getNumberOfPlayers","nameLocation":"5642:18:3","nodeType":"FunctionDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[],"src":"5660:2:3"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":601,"src":"5684:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":594,"name":"uint256","nodeType":"ElementaryTypeName","src":"5684:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5683:9:3"},"scope":610,"src":"5633:100:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":608,"nodeType":"Block","src":"5792:34:3","statements":[{"expression":{"id":606,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"5809:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":605,"id":607,"nodeType":"Return","src":"5802:17:3"}]},"functionSelector":"91ad27b4","id":609,"implemented":true,"kind":"function","modifiers":[],"name":"getInterval","nameLocation":"5748:11:3","nodeType":"FunctionDefinition","parameters":{"id":602,"nodeType":"ParameterList","parameters":[],"src":"5759:2:3"},"returnParameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":609,"src":"5783:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"5783:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5782:9:3"},"scope":610,"src":"5739:87:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":611,"src":"472:5356:3","usedErrors":[8,216,218,220,228]}],"src":"33:5796:3"},"id":3}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/test/Lottery.sol":{"Lottery":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"interval","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Lottery__NotEnoughETHToBuyATicket","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"numPlayers","type":"uint256"},{"internalType":"uint256","name":"state","type":"uint256"}],"name":"Lottery__PerformUpkeepNotNeeded","type":"error"},{"inputs":[],"name":"Lottery__StateIsNotOpen","type":"error"},{"inputs":[],"name":"Lottery__TransferFailed","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"LotteryEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"LotteryRequestedWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"LotteryWinnerPicked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isOpen","type":"bool"},{"indexed":false,"internalType":"bool","name":"timeHasPassed","type":"bool"},{"indexed":false,"internalType":"bool","name":"hasPlayers","type":"bool"},{"indexed":false,"internalType":"bool","name":"hasBalance","type":"bool"}],"name":"UpkeepNeeded","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enterLottery","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLatestTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLotteryState","outputs":[{"internalType":"enum Lottery.LotteryState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getNumberOfPlayers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRequestConfirmations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Stefania Pozzi","details":"Chainlink VRF V2, Keepers ","kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"Chainlink keeper implementation Chainlink nodes checks if upkeepNeeded is true 1. Time is passed 2. Lottery is not computating 3. More than 1 player and Lottery contract must have positive balance 4. LINK in subscription balance for VRF"}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_306":{"entryPoint":null,"id":306,"parameterSlots":6,"returnSlots":0},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory":{"entryPoint":178,"id":null,"parameterSlots":2,"returnSlots":6},"panic_error_0x21":{"entryPoint":317,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:962:4","statements":[{"nodeType":"YulBlock","src":"6:3:4","statements":[]},{"body":{"nodeType":"YulBlock","src":"178:650:4","statements":[{"body":{"nodeType":"YulBlock","src":"225:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"237:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"227:6:4"},"nodeType":"YulFunctionCall","src":"227:12:4"},"nodeType":"YulExpressionStatement","src":"227:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"199:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"208:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"195:3:4"},"nodeType":"YulFunctionCall","src":"195:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"220:3:4","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"191:3:4"},"nodeType":"YulFunctionCall","src":"191:33:4"},"nodeType":"YulIf","src":"188:53:4"},{"nodeType":"YulVariableDeclaration","src":"250:29:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"269:9:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"263:5:4"},"nodeType":"YulFunctionCall","src":"263:16:4"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"254:5:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"342:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"351:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"354:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"344:6:4"},"nodeType":"YulFunctionCall","src":"344:12:4"},"nodeType":"YulExpressionStatement","src":"344:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"301:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"312:5:4"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"327:3:4","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"332:1:4","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"323:3:4"},"nodeType":"YulFunctionCall","src":"323:11:4"},{"kind":"number","nodeType":"YulLiteral","src":"336:1:4","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"319:3:4"},"nodeType":"YulFunctionCall","src":"319:19:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"308:3:4"},"nodeType":"YulFunctionCall","src":"308:31:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"298:2:4"},"nodeType":"YulFunctionCall","src":"298:42:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"291:6:4"},"nodeType":"YulFunctionCall","src":"291:50:4"},"nodeType":"YulIf","src":"288:70:4"},{"nodeType":"YulAssignment","src":"367:15:4","value":{"name":"value","nodeType":"YulIdentifier","src":"377:5:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"367:6:4"}]},{"nodeType":"YulAssignment","src":"391:35:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"411:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"422:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:4"},"nodeType":"YulFunctionCall","src":"407:18:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"401:5:4"},"nodeType":"YulFunctionCall","src":"401:25:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"391:6:4"}]},{"nodeType":"YulAssignment","src":"435:35:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"455:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"466:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"451:3:4"},"nodeType":"YulFunctionCall","src":"451:18:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"445:5:4"},"nodeType":"YulFunctionCall","src":"445:25:4"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"435:6:4"}]},{"nodeType":"YulVariableDeclaration","src":"479:40:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"504:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"515:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"500:3:4"},"nodeType":"YulFunctionCall","src":"500:18:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"494:5:4"},"nodeType":"YulFunctionCall","src":"494:25:4"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"483:7:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"585:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"594:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"597:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"587:6:4"},"nodeType":"YulFunctionCall","src":"587:12:4"},"nodeType":"YulExpressionStatement","src":"587:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"541:7:4"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"554:7:4"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"571:2:4","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"575:1:4","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"567:3:4"},"nodeType":"YulFunctionCall","src":"567:10:4"},{"kind":"number","nodeType":"YulLiteral","src":"579:1:4","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"563:3:4"},"nodeType":"YulFunctionCall","src":"563:18:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"550:3:4"},"nodeType":"YulFunctionCall","src":"550:32:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"538:2:4"},"nodeType":"YulFunctionCall","src":"538:45:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"531:6:4"},"nodeType":"YulFunctionCall","src":"531:53:4"},"nodeType":"YulIf","src":"528:73:4"},{"nodeType":"YulAssignment","src":"610:17:4","value":{"name":"value_1","nodeType":"YulIdentifier","src":"620:7:4"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"610:6:4"}]},{"nodeType":"YulVariableDeclaration","src":"636:41:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"672:3:4","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"657:3:4"},"nodeType":"YulFunctionCall","src":"657:19:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"651:5:4"},"nodeType":"YulFunctionCall","src":"651:26:4"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"640:7:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:4"},"nodeType":"YulFunctionCall","src":"737:12:4"},"nodeType":"YulExpressionStatement","src":"737:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"699:7:4"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"712:7:4"},{"kind":"number","nodeType":"YulLiteral","src":"721:10:4","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"708:3:4"},"nodeType":"YulFunctionCall","src":"708:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"696:2:4"},"nodeType":"YulFunctionCall","src":"696:37:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"689:6:4"},"nodeType":"YulFunctionCall","src":"689:45:4"},"nodeType":"YulIf","src":"686:65:4"},{"nodeType":"YulAssignment","src":"760:17:4","value":{"name":"value_2","nodeType":"YulIdentifier","src":"770:7:4"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"760:6:4"}]},{"nodeType":"YulAssignment","src":"786:36:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"806:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"817:3:4","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"802:3:4"},"nodeType":"YulFunctionCall","src":"802:19:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"796:5:4"},"nodeType":"YulFunctionCall","src":"796:26:4"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"786:6:4"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"115:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"127:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"135:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"143:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"151:6:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"159:6:4","type":""},{"name":"value5","nodeType":"YulTypedName","src":"167:6:4","type":""}],"src":"14:814:4"},{"body":{"nodeType":"YulBlock","src":"865:95:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"882:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"889:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"894:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"885:3:4"},"nodeType":"YulFunctionCall","src":"885:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"875:6:4"},"nodeType":"YulFunctionCall","src":"875:31:4"},"nodeType":"YulExpressionStatement","src":"875:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"922:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"925:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"915:6:4"},"nodeType":"YulFunctionCall","src":"915:15:4"},"nodeType":"YulExpressionStatement","src":"915:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"946:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"949:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"939:6:4"},"nodeType":"YulFunctionCall","src":"939:15:4"},"nodeType":"YulExpressionStatement","src":"939:15:4"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"833:127:4"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        let value_1 := mload(add(headStart, 96))\n        if iszero(eq(value_1, and(value_1, sub(shl(64, 1), 1)))) { revert(0, 0) }\n        value3 := value_1\n        let value_2 := mload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xffffffff))) { revert(0, 0) }\n        value4 := value_2\n        value5 := mload(add(headStart, 160))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}","id":4,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61016060405234801561001157600080fd5b50604051610dd1380380610dd1833981016040819052610030916100b2565b606086901b6001600160601b031916608081905260a086905260c090815260e08581529084901b6001600160c01b0319166101005282901b6001600160e01b0319166101205260006002805460ff60a01b1916600160a01b83600181111561009a5761009a61013d565b02179055504260015561014052506101539350505050565b60008060008060008060c087890312156100cb57600080fd5b86516001600160a01b03811681146100e257600080fd5b6020880151604089015160608a015192985090965094506001600160401b038116811461010e57600080fd5b608088015190935063ffffffff8116811461012857600080fd5b8092505060a087015190509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051610c046101cd6000396000818161022d015261054e01526000610401015260006103ca015260006103a40152600061043f01526000818160d601526105fe01526000818161028e01526102d00152610c046000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461021e578063c1af578514610251578063f43b52cb14610259578063fd6673f51461026e57600080fd5b80635f1b0fd8146101b55780636b68c03c146101c95780636e04ff0d146101f057600080fd5b806309bc33a7146100c75780631fe543e3146101095780634585e33b1461012b578063460e20491461014b578063473f1ddc1461018357806353a2c19a146101a1575b600080fd5b3480156100d357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561011557600080fd5b506101296101243660046109d4565b610283565b005b34801561013757600080fd5b5061012961014636600461089b565b610310565b34801561015757600080fd5b5061016b6101663660046109a2565b6104ef565b6040516001600160a01b039091168152602001610100565b34801561018f57600080fd5b506002546001600160a01b031661016b565b3480156101ad57600080fd5b5060016100f6565b3480156101c157600080fd5b5060036100f6565b3480156101d557600080fd5b50600254600160a01b900460ff166040516101009190610aec565b3480156101fc57600080fd5b5061021061020b36600461090d565b61051e565b604051610100929190610a8d565b34801561022a57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f6565b6101296105fc565b34801561026557600080fd5b506001546100f6565b34801561027a57600080fd5b506000546100f6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103025760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61030c82826106e7565b5050565b600061032a6040518060200160405280600081525061051e565b5090508061038057600054600254479190600160a01b900460ff16600181111561035657610356610b8c565b6040516312ce08eb60e11b81526004810193909352602483019190915260448201526064016102f9565b60028054600160a01b60ff60a01b199091161790556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff166064820152600160848201526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906109bb565b60405190915081907f87e9e980e89d02ed1bfb229e02562db262b78c5fdfe0404b1b3d333a3fb4c6bd90600090a250505050565b600080828154811061050357610503610ba2565b6000918252602090912001546001600160a01b031692915050565b600060606000600260149054906101000a900460ff16600181111561054557610545610b8c565b600014905060007f00000000000000000000000000000000000000000000000000000000000000006001544261057b9190610b45565b6000549110915015154715158380156105915750825b801561059a5750815b80156105a35750805b604080518615158152851515602082015284151581830152831515606082015290519197507ff038df2b34bb2873c72580d9121c282ca8922e7ff27438145be692480cacc9e3919081900360800190a150505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561063d5760405163b35614e760e01b815260040160405180910390fd5b6000600254600160a01b900460ff16600181111561065d5761065d610b8c565b1461067b57604051637aaa1dfb60e01b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c91a2565b600080548251839083906106fd576106fd610ba2565b602002602001015161070f9190610b6a565b9050600080828154811061072557610725610ba2565b600091825260208083209190910154604080518481529283019081905291516001600160a01b03909116935061075c929190610821565b5042600155600280546001600160a81b0319166001600160a01b0383169081179091556040516000919047908381818185875af1925050503d80600081146107c0576040519150601f19603f3d011682016040523d82523d6000602084013e6107c5565b606091505b50509050806107e65760405162e4a00960e51b815260040160405180910390fd5b6040516001600160a01b038316907fb896f9276cf1b0dbe15c17dd5b14b9dc204c39d78658ea01c3db123fce01118390600090a25050505050565b828054828255906000526020600020908101928215610876579160200282015b8281111561087657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610841565b50610882929150610886565b5090565b5b808211156108825760008155600101610887565b600080602083850312156108ae57600080fd5b823567ffffffffffffffff808211156108c657600080fd5b818501915085601f8301126108da57600080fd5b8135818111156108e957600080fd5b8660208285010111156108fb57600080fd5b60209290920196919550909350505050565b6000602080838503121561092057600080fd5b823567ffffffffffffffff8082111561093857600080fd5b818501915085601f83011261094c57600080fd5b81358181111561095e5761095e610bb8565b610970601f8201601f19168501610b14565b9150808252868482850101111561098657600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156109b457600080fd5b5035919050565b6000602082840312156109cd57600080fd5b5051919050565b600080604083850312156109e757600080fd5b8235915060208084013567ffffffffffffffff80821115610a0757600080fd5b818601915086601f830112610a1b57600080fd5b813581811115610a2d57610a2d610bb8565b8060051b9150610a3e848301610b14565b8181528481019084860184860187018b1015610a5957600080fd5b600095505b83861015610a7c578035835260019590950194918601918601610a5e565b508096505050505050509250929050565b821515815260006020604081840152835180604085015260005b81811015610ac357858101830151858201606001528201610aa7565b81811115610ad5576000606083870101525b50601f01601f191692909201606001949350505050565b6020810160028310610b0e57634e487b7160e01b600052602160045260246000fd5b91905290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3d57610b3d610bb8565b604052919050565b600082821015610b6557634e487b7160e01b600052601160045260246000fd5b500390565b600082610b8757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e8c721c25403cc3182bb633ea68513cfdaf4eaafbed8d90d2ad7aa319625eb7c64736f6c63430008070033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xDD1 CODESIZE SUB DUP1 PUSH2 0xDD1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0xB2 JUMP JUMPDEST PUSH1 0x60 DUP7 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP7 SWAP1 MSTORE PUSH1 0xC0 SWAP1 DUP2 MSTORE PUSH1 0xE0 DUP6 DUP2 MSTORE SWAP1 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH2 0x100 MSTORE DUP3 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x120 MSTORE PUSH1 0x0 PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9A JUMPI PUSH2 0x9A PUSH2 0x13D JUMP JUMPDEST MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x1 SSTORE PUSH2 0x140 MSTORE POP PUSH2 0x153 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD PUSH1 0x40 DUP10 ADD MLOAD PUSH1 0x60 DUP11 ADD MLOAD SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD SWAP1 SWAP4 POP PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xC0 SHR PUSH2 0x120 MLOAD PUSH1 0xE0 SHR PUSH2 0x140 MLOAD PUSH2 0xC04 PUSH2 0x1CD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x22D ADD MSTORE PUSH2 0x54E ADD MSTORE PUSH1 0x0 PUSH2 0x401 ADD MSTORE PUSH1 0x0 PUSH2 0x3CA ADD MSTORE PUSH1 0x0 PUSH2 0x3A4 ADD MSTORE PUSH1 0x0 PUSH2 0x43F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xD6 ADD MSTORE PUSH2 0x5FE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x28E ADD MSTORE PUSH2 0x2D0 ADD MSTORE PUSH2 0xC04 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5F1B0FD8 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0x91AD27B4 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0xF43B52CB EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F1B0FD8 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x6B68C03C EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x460E2049 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x1A1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D4 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x89B JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x100 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH2 0xF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 PUSH2 0xF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x210 PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x90D JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP3 SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0xF6 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x5FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xF6 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x30C DUP3 DUP3 PUSH2 0x6E7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32A PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x51E JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x380 JUMPI PUSH1 0x0 SLOAD PUSH1 0x2 SLOAD SELFBALANCE SWAP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x356 JUMPI PUSH2 0x356 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12CE08EB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x0 PUSH4 0xFFFFFFFF AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x497 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x9BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP DUP2 SWAP1 PUSH32 0x87E9E980E89D02ED1BFB229E02562DB262B78C5FDFE0404B1B3D333A3FB4C6BD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0xBA2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x545 JUMPI PUSH2 0x545 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x0 EQ SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x57B SWAP2 SWAP1 PUSH2 0xB45 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP2 LT SWAP2 POP ISZERO ISZERO SELFBALANCE ISZERO ISZERO DUP4 DUP1 ISZERO PUSH2 0x591 JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x59A JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x5A3 JUMPI POP DUP1 JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 ISZERO ISZERO DUP2 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE DUP5 ISZERO ISZERO DUP2 DUP4 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP8 POP PUSH32 0xF038DF2B34BB2873C72580D9121C282CA8922E7FF27438145BE692480CACC9E3 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB35614E7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x65D JUMPI PUSH2 0x65D PUSH2 0xB8C JUMP JUMPDEST EQ PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH4 0x7AAA1DFB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE DUP2 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 PUSH32 0x1D64FB5BA9F2548C5B98468D58F25B87B9E866AFEE0122E92D9FE722BF85076C SWAP2 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 PUSH2 0x6FD JUMPI PUSH2 0x6FD PUSH2 0xBA2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x70F SWAP2 SWAP1 PUSH2 0xB6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x725 JUMPI PUSH2 0x725 PUSH2 0xBA2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP3 DUP4 ADD SWAP1 DUP2 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP4 POP PUSH2 0x75C SWAP3 SWAP2 SWAP1 PUSH2 0x821 JUMP JUMPDEST POP TIMESTAMP PUSH1 0x1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xE4A009 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xB896F9276CF1B0DBE15C17DD5B14B9DC204C39D78658EA01C3DB123FCE011183 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x876 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x876 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x841 JUMP JUMPDEST POP PUSH2 0x882 SWAP3 SWAP2 POP PUSH2 0x886 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x887 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x938 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x94C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x95E JUMPI PUSH2 0x95E PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x970 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP6 ADD PUSH2 0xB14 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP7 DUP5 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 ADD DUP6 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA2D JUMPI PUSH2 0xA2D PUSH2 0xBB8 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0xA3E DUP5 DUP4 ADD PUSH2 0xB14 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP12 LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xA7C JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0xA5E JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAC3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0xAA7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAD5 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x60 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0xB0E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB3D JUMPI PUSH2 0xB3D PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xB65 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB87 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xC7 0x21 0xC2 SLOAD SUB 0xCC BALANCE DUP3 0xBB PUSH4 0x3EA68513 0xCF 0xDA DELEGATECALL 0xEA 0xAF 0xBE 0xD8 0xD9 0xD 0x2A 0xD7 0xAA BALANCE SWAP7 0x25 0xEB PUSH29 0x64736F6C63430008070033000000000000000000000000000000000000 ","sourceMap":"472:5356:3:-:0;;;1755:647;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5599:32:0;;;;-1:-1:-1;;;;;;5599:32:0;;;;;2033:27:3::1;::::0;;;2070:62:::1;::::0;;;2142:19:::1;::::0;;;2171:33;;;;-1:-1:-1;;;;;;2171:33:3;::::1;::::0;2214:37;;;-1:-1:-1;;;;;;2214:37:3;::::1;::::0;2291:1:::1;2261:14;:32:::0;;-1:-1:-1;;;;2261:32:3::1;-1:-1:-1::0;;;2261:32:3;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;2349:15:3::1;2326:20;:38:::0;2374:21:::1;::::0;-1:-1:-1;472:5356:3;;-1:-1:-1;;;;472:5356:3;14:814:4;127:6;135;143;151;159;167;220:3;208:9;199:7;195:23;191:33;188:53;;;237:1;234;227:12;188:53;263:16;;-1:-1:-1;;;;;308:31:4;;298:42;;288:70;;354:1;351;344:12;288:70;422:2;407:18;;401:25;466:2;451:18;;445:25;515:2;500:18;;494:25;377:5;;-1:-1:-1;401:25:4;;-1:-1:-1;445:25:4;-1:-1:-1;;;;;;550:32:4;;538:45;;528:73;;597:1;594;587:12;528:73;672:3;657:19;;651:26;620:7;;-1:-1:-1;721:10:4;708:24;;696:37;;686:65;;747:1;744;737:12;686:65;770:7;760:17;;;817:3;806:9;802:19;796:26;786:36;;14:814;;;;;;;;:::o;833:127::-;894:10;889:3;885:20;882:1;875:31;925:4;922:1;915:15;949:4;946:1;939:15;833:127;472:5356:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@checkUpkeep_477":{"entryPoint":1310,"id":477,"parameterSlots":1,"returnSlots":2},"@enterLottery_343":{"entryPoint":1532,"id":343,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_414":{"entryPoint":1767,"id":414,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_539":{"entryPoint":null,"id":539,"parameterSlots":0,"returnSlots":1},"@getInterval_609":{"entryPoint":null,"id":609,"parameterSlots":0,"returnSlots":1},"@getLatestTimestamp_575":{"entryPoint":null,"id":575,"parameterSlots":0,"returnSlots":1},"@getLotteryState_592":{"entryPoint":null,"id":592,"parameterSlots":0,"returnSlots":1},"@getNumWords_567":{"entryPoint":null,"id":567,"parameterSlots":0,"returnSlots":1},"@getNumberOfPlayers_601":{"entryPoint":null,"id":601,"parameterSlots":0,"returnSlots":1},"@getPlayers_551":{"entryPoint":1263,"id":551,"parameterSlots":1,"returnSlots":1},"@getRecentWinner_559":{"entryPoint":null,"id":559,"parameterSlots":0,"returnSlots":1},"@getRequestConfirmations_583":{"entryPoint":null,"id":583,"parameterSlots":0,"returnSlots":1},"@performUpkeep_531":{"entryPoint":784,"id":531,"parameterSlots":2,"returnSlots":0},"@rawFulfillRandomWords_56":{"entryPoint":643,"id":56,"parameterSlots":2,"returnSlots":0},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":2203,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":2317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2491,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2516,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2701,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_LotteryState_$185__to_t_uint8__fromStack_reversed":{"entryPoint":2796,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":2836,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2885,"id":null,"parameterSlots":2,"returnSlots":1},"mod_t_uint256":{"entryPoint":2922,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":2956,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2978,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3000,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7140:4","statements":[{"nodeType":"YulBlock","src":"6:3:4","statements":[]},{"body":{"nodeType":"YulBlock","src":"103:502:4","statements":[{"body":{"nodeType":"YulBlock","src":"149:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"158:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"151:6:4"},"nodeType":"YulFunctionCall","src":"151:12:4"},"nodeType":"YulExpressionStatement","src":"151:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"124:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"133:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"120:3:4"},"nodeType":"YulFunctionCall","src":"120:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"145:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"116:3:4"},"nodeType":"YulFunctionCall","src":"116:32:4"},"nodeType":"YulIf","src":"113:52:4"},{"nodeType":"YulVariableDeclaration","src":"174:37:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"201:9:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"188:12:4"},"nodeType":"YulFunctionCall","src":"188:23:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"178:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"220:28:4","value":{"kind":"number","nodeType":"YulLiteral","src":"230:18:4","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"224:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"275:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"284:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"287:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"277:6:4"},"nodeType":"YulFunctionCall","src":"277:12:4"},"nodeType":"YulExpressionStatement","src":"277:12:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"263:6:4"},{"name":"_1","nodeType":"YulIdentifier","src":"271:2:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"260:2:4"},"nodeType":"YulFunctionCall","src":"260:14:4"},"nodeType":"YulIf","src":"257:34:4"},{"nodeType":"YulVariableDeclaration","src":"300:32:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"314:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"325:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"310:3:4"},"nodeType":"YulFunctionCall","src":"310:22:4"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"304:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"380:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"389:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"392:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"382:6:4"},"nodeType":"YulFunctionCall","src":"382:12:4"},"nodeType":"YulExpressionStatement","src":"382:12:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"359:2:4"},{"kind":"number","nodeType":"YulLiteral","src":"363:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"355:3:4"},"nodeType":"YulFunctionCall","src":"355:13:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"370:7:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"351:3:4"},"nodeType":"YulFunctionCall","src":"351:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"344:6:4"},"nodeType":"YulFunctionCall","src":"344:35:4"},"nodeType":"YulIf","src":"341:55:4"},{"nodeType":"YulVariableDeclaration","src":"405:30:4","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"432:2:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"419:12:4"},"nodeType":"YulFunctionCall","src":"419:16:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"409:6:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:4"},"nodeType":"YulFunctionCall","src":"464:12:4"},"nodeType":"YulExpressionStatement","src":"464:12:4"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"450:6:4"},{"name":"_1","nodeType":"YulIdentifier","src":"458:2:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"447:2:4"},"nodeType":"YulFunctionCall","src":"447:14:4"},"nodeType":"YulIf","src":"444:34:4"},{"body":{"nodeType":"YulBlock","src":"528:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"540:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"530:6:4"},"nodeType":"YulFunctionCall","src":"530:12:4"},"nodeType":"YulExpressionStatement","src":"530:12:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"501:2:4"},{"name":"length","nodeType":"YulIdentifier","src":"505:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"497:3:4"},"nodeType":"YulFunctionCall","src":"497:15:4"},{"kind":"number","nodeType":"YulLiteral","src":"514:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"493:3:4"},"nodeType":"YulFunctionCall","src":"493:24:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"519:7:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"490:2:4"},"nodeType":"YulFunctionCall","src":"490:37:4"},"nodeType":"YulIf","src":"487:57:4"},{"nodeType":"YulAssignment","src":"553:21:4","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"567:2:4"},{"kind":"number","nodeType":"YulLiteral","src":"571:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"563:3:4"},"nodeType":"YulFunctionCall","src":"563:11:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"553:6:4"}]},{"nodeType":"YulAssignment","src":"583:16:4","value":{"name":"length","nodeType":"YulIdentifier","src":"593:6:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"583:6:4"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"92:6:4","type":""}],"src":"14:591:4"},{"body":{"nodeType":"YulBlock","src":"689:684:4","statements":[{"nodeType":"YulVariableDeclaration","src":"699:12:4","value":{"kind":"number","nodeType":"YulLiteral","src":"709:2:4","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"703:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"756:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"765:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"768:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"758:6:4"},"nodeType":"YulFunctionCall","src":"758:12:4"},"nodeType":"YulExpressionStatement","src":"758:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"731:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"740:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"727:3:4"},"nodeType":"YulFunctionCall","src":"727:23:4"},{"name":"_1","nodeType":"YulIdentifier","src":"752:2:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"723:3:4"},"nodeType":"YulFunctionCall","src":"723:32:4"},"nodeType":"YulIf","src":"720:52:4"},{"nodeType":"YulVariableDeclaration","src":"781:37:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"808:9:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"795:12:4"},"nodeType":"YulFunctionCall","src":"795:23:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"785:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"827:28:4","value":{"kind":"number","nodeType":"YulLiteral","src":"837:18:4","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"831:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"882:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"891:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"894:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"884:6:4"},"nodeType":"YulFunctionCall","src":"884:12:4"},"nodeType":"YulExpressionStatement","src":"884:12:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"870:6:4"},{"name":"_2","nodeType":"YulIdentifier","src":"878:2:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"867:2:4"},"nodeType":"YulFunctionCall","src":"867:14:4"},"nodeType":"YulIf","src":"864:34:4"},{"nodeType":"YulVariableDeclaration","src":"907:32:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"921:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"932:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"917:3:4"},"nodeType":"YulFunctionCall","src":"917:22:4"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"911:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"987:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"996:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"999:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"989:6:4"},"nodeType":"YulFunctionCall","src":"989:12:4"},"nodeType":"YulExpressionStatement","src":"989:12:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"966:2:4"},{"kind":"number","nodeType":"YulLiteral","src":"970:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"962:3:4"},"nodeType":"YulFunctionCall","src":"962:13:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"977:7:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"958:3:4"},"nodeType":"YulFunctionCall","src":"958:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"951:6:4"},"nodeType":"YulFunctionCall","src":"951:35:4"},"nodeType":"YulIf","src":"948:55:4"},{"nodeType":"YulVariableDeclaration","src":"1012:26:4","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1035:2:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1022:12:4"},"nodeType":"YulFunctionCall","src":"1022:16:4"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1016:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"1061:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1063:16:4"},"nodeType":"YulFunctionCall","src":"1063:18:4"},"nodeType":"YulExpressionStatement","src":"1063:18:4"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1053:2:4"},{"name":"_2","nodeType":"YulIdentifier","src":"1057:2:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1050:2:4"},"nodeType":"YulFunctionCall","src":"1050:10:4"},"nodeType":"YulIf","src":"1047:36:4"},{"nodeType":"YulVariableDeclaration","src":"1092:66:4","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1133:2:4"},{"kind":"number","nodeType":"YulLiteral","src":"1137:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1129:3:4"},"nodeType":"YulFunctionCall","src":"1129:13:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1148:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1144:3:4"},"nodeType":"YulFunctionCall","src":"1144:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1125:3:4"},"nodeType":"YulFunctionCall","src":"1125:27:4"},{"name":"_1","nodeType":"YulIdentifier","src":"1154:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1121:3:4"},"nodeType":"YulFunctionCall","src":"1121:36:4"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1105:15:4"},"nodeType":"YulFunctionCall","src":"1105:53:4"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"1096:5:4","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1174:5:4"},{"name":"_4","nodeType":"YulIdentifier","src":"1181:2:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1167:6:4"},"nodeType":"YulFunctionCall","src":"1167:17:4"},"nodeType":"YulExpressionStatement","src":"1167:17:4"},{"body":{"nodeType":"YulBlock","src":"1230:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1239:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1242:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1232:6:4"},"nodeType":"YulFunctionCall","src":"1232:12:4"},"nodeType":"YulExpressionStatement","src":"1232:12:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1207:2:4"},{"name":"_4","nodeType":"YulIdentifier","src":"1211:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1203:3:4"},"nodeType":"YulFunctionCall","src":"1203:11:4"},{"name":"_1","nodeType":"YulIdentifier","src":"1216:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1199:3:4"},"nodeType":"YulFunctionCall","src":"1199:20:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1221:7:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1196:2:4"},"nodeType":"YulFunctionCall","src":"1196:33:4"},"nodeType":"YulIf","src":"1193:53:4"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1272:5:4"},{"name":"_1","nodeType":"YulIdentifier","src":"1279:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1268:3:4"},"nodeType":"YulFunctionCall","src":"1268:14:4"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1288:2:4"},{"name":"_1","nodeType":"YulIdentifier","src":"1292:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1284:3:4"},"nodeType":"YulFunctionCall","src":"1284:11:4"},{"name":"_4","nodeType":"YulIdentifier","src":"1297:2:4"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1255:12:4"},"nodeType":"YulFunctionCall","src":"1255:45:4"},"nodeType":"YulExpressionStatement","src":"1255:45:4"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1324:5:4"},{"name":"_4","nodeType":"YulIdentifier","src":"1331:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1320:3:4"},"nodeType":"YulFunctionCall","src":"1320:14:4"},{"name":"_1","nodeType":"YulIdentifier","src":"1336:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1316:3:4"},"nodeType":"YulFunctionCall","src":"1316:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1341:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1309:6:4"},"nodeType":"YulFunctionCall","src":"1309:34:4"},"nodeType":"YulExpressionStatement","src":"1309:34:4"},{"nodeType":"YulAssignment","src":"1352:15:4","value":{"name":"array","nodeType":"YulIdentifier","src":"1362:5:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1352:6:4"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"655:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"666:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"678:6:4","type":""}],"src":"610:763:4"},{"body":{"nodeType":"YulBlock","src":"1448:110:4","statements":[{"body":{"nodeType":"YulBlock","src":"1494:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1503:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1506:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1496:6:4"},"nodeType":"YulFunctionCall","src":"1496:12:4"},"nodeType":"YulExpressionStatement","src":"1496:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1469:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"1478:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1465:3:4"},"nodeType":"YulFunctionCall","src":"1465:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1490:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1461:3:4"},"nodeType":"YulFunctionCall","src":"1461:32:4"},"nodeType":"YulIf","src":"1458:52:4"},{"nodeType":"YulAssignment","src":"1519:33:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1542:9:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1529:12:4"},"nodeType":"YulFunctionCall","src":"1529:23:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1519:6:4"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1414:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1425:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1437:6:4","type":""}],"src":"1378:180:4"},{"body":{"nodeType":"YulBlock","src":"1644:103:4","statements":[{"body":{"nodeType":"YulBlock","src":"1690:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1699:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1702:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1692:6:4"},"nodeType":"YulFunctionCall","src":"1692:12:4"},"nodeType":"YulExpressionStatement","src":"1692:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1665:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"1674:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1661:3:4"},"nodeType":"YulFunctionCall","src":"1661:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1686:2:4","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1657:3:4"},"nodeType":"YulFunctionCall","src":"1657:32:4"},"nodeType":"YulIf","src":"1654:52:4"},{"nodeType":"YulAssignment","src":"1715:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1731:9:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1725:5:4"},"nodeType":"YulFunctionCall","src":"1725:16:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1715:6:4"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1610:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1621:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1633:6:4","type":""}],"src":"1563:184:4"},{"body":{"nodeType":"YulBlock","src":"1864:913:4","statements":[{"body":{"nodeType":"YulBlock","src":"1910:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1919:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1922:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1912:6:4"},"nodeType":"YulFunctionCall","src":"1912:12:4"},"nodeType":"YulExpressionStatement","src":"1912:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1885:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"1894:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1881:3:4"},"nodeType":"YulFunctionCall","src":"1881:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"1906:2:4","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1877:3:4"},"nodeType":"YulFunctionCall","src":"1877:32:4"},"nodeType":"YulIf","src":"1874:52:4"},{"nodeType":"YulAssignment","src":"1935:33:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1958:9:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1945:12:4"},"nodeType":"YulFunctionCall","src":"1945:23:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1935:6:4"}]},{"nodeType":"YulVariableDeclaration","src":"1977:12:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1987:2:4","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1981:2:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1998:46:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2029:9:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2040:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2025:3:4"},"nodeType":"YulFunctionCall","src":"2025:18:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2012:12:4"},"nodeType":"YulFunctionCall","src":"2012:32:4"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2002:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2053:28:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2063:18:4","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2057:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2108:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2117:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2120:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2110:6:4"},"nodeType":"YulFunctionCall","src":"2110:12:4"},"nodeType":"YulExpressionStatement","src":"2110:12:4"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2096:6:4"},{"name":"_2","nodeType":"YulIdentifier","src":"2104:2:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2093:2:4"},"nodeType":"YulFunctionCall","src":"2093:14:4"},"nodeType":"YulIf","src":"2090:34:4"},{"nodeType":"YulVariableDeclaration","src":"2133:32:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2147:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2143:3:4"},"nodeType":"YulFunctionCall","src":"2143:22:4"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2137:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2213:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2222:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2225:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2215:6:4"},"nodeType":"YulFunctionCall","src":"2215:12:4"},"nodeType":"YulExpressionStatement","src":"2215:12:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2192:2:4"},{"kind":"number","nodeType":"YulLiteral","src":"2196:4:4","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2188:3:4"},"nodeType":"YulFunctionCall","src":"2188:13:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2203:7:4"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2184:3:4"},"nodeType":"YulFunctionCall","src":"2184:27:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2177:6:4"},"nodeType":"YulFunctionCall","src":"2177:35:4"},"nodeType":"YulIf","src":"2174:55:4"},{"nodeType":"YulVariableDeclaration","src":"2238:26:4","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2261:2:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2248:12:4"},"nodeType":"YulFunctionCall","src":"2248:16:4"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2242:2:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2287:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2289:16:4"},"nodeType":"YulFunctionCall","src":"2289:18:4"},"nodeType":"YulExpressionStatement","src":"2289:18:4"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"2279:2:4"},{"name":"_2","nodeType":"YulIdentifier","src":"2283:2:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2276:2:4"},"nodeType":"YulFunctionCall","src":"2276:10:4"},"nodeType":"YulIf","src":"2273:36:4"},{"nodeType":"YulVariableDeclaration","src":"2318:20:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2332:1:4","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"2335:2:4"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2328:3:4"},"nodeType":"YulFunctionCall","src":"2328:10:4"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"2322:2:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2347:39:4","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"2378:2:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2382:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2374:3:4"},"nodeType":"YulFunctionCall","src":"2374:11:4"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2358:15:4"},"nodeType":"YulFunctionCall","src":"2358:28:4"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2351:3:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2395:16:4","value":{"name":"dst","nodeType":"YulIdentifier","src":"2408:3:4"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2399:5:4","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2427:3:4"},{"name":"_4","nodeType":"YulIdentifier","src":"2432:2:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2420:6:4"},"nodeType":"YulFunctionCall","src":"2420:15:4"},"nodeType":"YulExpressionStatement","src":"2420:15:4"},{"nodeType":"YulAssignment","src":"2444:19:4","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2455:3:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2460:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2451:3:4"},"nodeType":"YulFunctionCall","src":"2451:12:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2444:3:4"}]},{"nodeType":"YulVariableDeclaration","src":"2472:22:4","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2487:2:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2491:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2483:3:4"},"nodeType":"YulFunctionCall","src":"2483:11:4"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2476:3:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2540:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2549:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2552:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2542:6:4"},"nodeType":"YulFunctionCall","src":"2542:12:4"},"nodeType":"YulExpressionStatement","src":"2542:12:4"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2517:2:4"},{"name":"_5","nodeType":"YulIdentifier","src":"2521:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2513:3:4"},"nodeType":"YulFunctionCall","src":"2513:11:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2526:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2509:3:4"},"nodeType":"YulFunctionCall","src":"2509:20:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2531:7:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2506:2:4"},"nodeType":"YulFunctionCall","src":"2506:33:4"},"nodeType":"YulIf","src":"2503:53:4"},{"nodeType":"YulVariableDeclaration","src":"2565:10:4","value":{"kind":"number","nodeType":"YulLiteral","src":"2574:1:4","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2569:1:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2629:118:4","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2650:3:4"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2668:3:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2655:12:4"},"nodeType":"YulFunctionCall","src":"2655:17:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2643:6:4"},"nodeType":"YulFunctionCall","src":"2643:30:4"},"nodeType":"YulExpressionStatement","src":"2643:30:4"},{"nodeType":"YulAssignment","src":"2686:19:4","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2697:3:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2702:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2693:3:4"},"nodeType":"YulFunctionCall","src":"2693:12:4"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2686:3:4"}]},{"nodeType":"YulAssignment","src":"2718:19:4","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2729:3:4"},{"name":"_1","nodeType":"YulIdentifier","src":"2734:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:4"},"nodeType":"YulFunctionCall","src":"2725:12:4"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2718:3:4"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2595:1:4"},{"name":"_4","nodeType":"YulIdentifier","src":"2598:2:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2592:2:4"},"nodeType":"YulFunctionCall","src":"2592:9:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2602:18:4","statements":[{"nodeType":"YulAssignment","src":"2604:14:4","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2613:1:4"},{"kind":"number","nodeType":"YulLiteral","src":"2616:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2609:3:4"},"nodeType":"YulFunctionCall","src":"2609:9:4"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2604:1:4"}]}]},"pre":{"nodeType":"YulBlock","src":"2588:3:4","statements":[]},"src":"2584:163:4"},{"nodeType":"YulAssignment","src":"2756:15:4","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2766:5:4"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2756:6:4"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1822:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1833:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1845:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1853:6:4","type":""}],"src":"1752:1025:4"},{"body":{"nodeType":"YulBlock","src":"2973:14:4","statements":[{"nodeType":"YulAssignment","src":"2975:10:4","value":{"name":"pos","nodeType":"YulIdentifier","src":"2982:3:4"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2975:3:4"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2957:3:4","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2965:3:4","type":""}],"src":"2782:205:4"},{"body":{"nodeType":"YulBlock","src":"3093:102:4","statements":[{"nodeType":"YulAssignment","src":"3103:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3115:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3126:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3111:3:4"},"nodeType":"YulFunctionCall","src":"3111:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3103:4:4"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3145:9:4"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3160:6:4"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3176:3:4","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3181:1:4","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3172:3:4"},"nodeType":"YulFunctionCall","src":"3172:11:4"},{"kind":"number","nodeType":"YulLiteral","src":"3185:1:4","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3168:3:4"},"nodeType":"YulFunctionCall","src":"3168:19:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3156:3:4"},"nodeType":"YulFunctionCall","src":"3156:32:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3138:6:4"},"nodeType":"YulFunctionCall","src":"3138:51:4"},"nodeType":"YulExpressionStatement","src":"3138:51:4"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3062:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3073:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3084:4:4","type":""}],"src":"2992:203:4"},{"body":{"nodeType":"YulBlock","src":"3329:175:4","statements":[{"nodeType":"YulAssignment","src":"3339:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3351:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3362:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3347:3:4"},"nodeType":"YulFunctionCall","src":"3347:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3339:4:4"}]},{"nodeType":"YulVariableDeclaration","src":"3374:29:4","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3392:3:4","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3397:1:4","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3388:3:4"},"nodeType":"YulFunctionCall","src":"3388:11:4"},{"kind":"number","nodeType":"YulLiteral","src":"3401:1:4","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3384:3:4"},"nodeType":"YulFunctionCall","src":"3384:19:4"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3378:2:4","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:4"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3434:6:4"},{"name":"_1","nodeType":"YulIdentifier","src":"3442:2:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3430:3:4"},"nodeType":"YulFunctionCall","src":"3430:15:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3412:6:4"},"nodeType":"YulFunctionCall","src":"3412:34:4"},"nodeType":"YulExpressionStatement","src":"3412:34:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3466:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3477:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3462:3:4"},"nodeType":"YulFunctionCall","src":"3462:18:4"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3486:6:4"},{"name":"_1","nodeType":"YulIdentifier","src":"3494:2:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3482:3:4"},"nodeType":"YulFunctionCall","src":"3482:15:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3455:6:4"},"nodeType":"YulFunctionCall","src":"3455:43:4"},"nodeType":"YulExpressionStatement","src":"3455:43:4"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3290:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3301:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3309:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3320:4:4","type":""}],"src":"3200:304:4"},{"body":{"nodeType":"YulBlock","src":"3670:270:4","statements":[{"nodeType":"YulAssignment","src":"3680:27:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3692:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3703:3:4","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3688:3:4"},"nodeType":"YulFunctionCall","src":"3688:19:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3680:4:4"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3723:9:4"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3748:6:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3741:6:4"},"nodeType":"YulFunctionCall","src":"3741:14:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3734:6:4"},"nodeType":"YulFunctionCall","src":"3734:22:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3716:6:4"},"nodeType":"YulFunctionCall","src":"3716:41:4"},"nodeType":"YulExpressionStatement","src":"3716:41:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3777:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3788:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3773:3:4"},"nodeType":"YulFunctionCall","src":"3773:18:4"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3807:6:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3800:6:4"},"nodeType":"YulFunctionCall","src":"3800:14:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3793:6:4"},"nodeType":"YulFunctionCall","src":"3793:22:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3766:6:4"},"nodeType":"YulFunctionCall","src":"3766:50:4"},"nodeType":"YulExpressionStatement","src":"3766:50:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3836:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3847:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3832:3:4"},"nodeType":"YulFunctionCall","src":"3832:18:4"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3866:6:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3859:6:4"},"nodeType":"YulFunctionCall","src":"3859:14:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3852:6:4"},"nodeType":"YulFunctionCall","src":"3852:22:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3825:6:4"},"nodeType":"YulFunctionCall","src":"3825:50:4"},"nodeType":"YulExpressionStatement","src":"3825:50:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3895:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"3906:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3891:3:4"},"nodeType":"YulFunctionCall","src":"3891:18:4"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"3925:6:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3918:6:4"},"nodeType":"YulFunctionCall","src":"3918:14:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3911:6:4"},"nodeType":"YulFunctionCall","src":"3911:22:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3884:6:4"},"nodeType":"YulFunctionCall","src":"3884:50:4"},"nodeType":"YulExpressionStatement","src":"3884:50:4"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3615:9:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3626:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3634:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3642:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3650:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3661:4:4","type":""}],"src":"3509:431:4"},{"body":{"nodeType":"YulBlock","src":"4086:535:4","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4103:9:4"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4128:6:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4121:6:4"},"nodeType":"YulFunctionCall","src":"4121:14:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4114:6:4"},"nodeType":"YulFunctionCall","src":"4114:22:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4096:6:4"},"nodeType":"YulFunctionCall","src":"4096:41:4"},"nodeType":"YulExpressionStatement","src":"4096:41:4"},{"nodeType":"YulVariableDeclaration","src":"4146:12:4","value":{"kind":"number","nodeType":"YulLiteral","src":"4156:2:4","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4150:2:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4178:9:4"},{"name":"_1","nodeType":"YulIdentifier","src":"4189:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4174:3:4"},"nodeType":"YulFunctionCall","src":"4174:18:4"},{"kind":"number","nodeType":"YulLiteral","src":"4194:2:4","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4167:6:4"},"nodeType":"YulFunctionCall","src":"4167:30:4"},"nodeType":"YulExpressionStatement","src":"4167:30:4"},{"nodeType":"YulVariableDeclaration","src":"4206:27:4","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4226:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4220:5:4"},"nodeType":"YulFunctionCall","src":"4220:13:4"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4210:6:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4253:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4264:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4249:3:4"},"nodeType":"YulFunctionCall","src":"4249:18:4"},{"name":"length","nodeType":"YulIdentifier","src":"4269:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4242:6:4"},"nodeType":"YulFunctionCall","src":"4242:34:4"},"nodeType":"YulExpressionStatement","src":"4242:34:4"},{"nodeType":"YulVariableDeclaration","src":"4285:10:4","value":{"kind":"number","nodeType":"YulLiteral","src":"4294:1:4","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4289:1:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"4354:90:4","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:4"},{"name":"i","nodeType":"YulIdentifier","src":"4394:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4379:3:4"},"nodeType":"YulFunctionCall","src":"4379:17:4"},{"kind":"number","nodeType":"YulLiteral","src":"4398:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4375:3:4"},"nodeType":"YulFunctionCall","src":"4375:26:4"},{"arguments":[{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4417:6:4"},{"name":"i","nodeType":"YulIdentifier","src":"4425:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4413:3:4"},"nodeType":"YulFunctionCall","src":"4413:14:4"},{"name":"_1","nodeType":"YulIdentifier","src":"4429:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4409:3:4"},"nodeType":"YulFunctionCall","src":"4409:23:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4403:5:4"},"nodeType":"YulFunctionCall","src":"4403:30:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4368:6:4"},"nodeType":"YulFunctionCall","src":"4368:66:4"},"nodeType":"YulExpressionStatement","src":"4368:66:4"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4315:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"4318:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4312:2:4"},"nodeType":"YulFunctionCall","src":"4312:13:4"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4326:19:4","statements":[{"nodeType":"YulAssignment","src":"4328:15:4","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4337:1:4"},{"name":"_1","nodeType":"YulIdentifier","src":"4340:2:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:4"},"nodeType":"YulFunctionCall","src":"4333:10:4"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4328:1:4"}]}]},"pre":{"nodeType":"YulBlock","src":"4308:3:4","statements":[]},"src":"4304:140:4"},{"body":{"nodeType":"YulBlock","src":"4478:66:4","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4507:9:4"},{"name":"length","nodeType":"YulIdentifier","src":"4518:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4503:3:4"},"nodeType":"YulFunctionCall","src":"4503:22:4"},{"kind":"number","nodeType":"YulLiteral","src":"4527:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4499:3:4"},"nodeType":"YulFunctionCall","src":"4499:31:4"},{"kind":"number","nodeType":"YulLiteral","src":"4532:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4492:6:4"},"nodeType":"YulFunctionCall","src":"4492:42:4"},"nodeType":"YulExpressionStatement","src":"4492:42:4"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4459:1:4"},{"name":"length","nodeType":"YulIdentifier","src":"4462:6:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4456:2:4"},"nodeType":"YulFunctionCall","src":"4456:13:4"},"nodeType":"YulIf","src":"4453:91:4"},{"nodeType":"YulAssignment","src":"4553:62:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4569:9:4"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4588:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4596:2:4","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4584:3:4"},"nodeType":"YulFunctionCall","src":"4584:15:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4605:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4601:3:4"},"nodeType":"YulFunctionCall","src":"4601:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4580:3:4"},"nodeType":"YulFunctionCall","src":"4580:29:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4565:3:4"},"nodeType":"YulFunctionCall","src":"4565:45:4"},{"kind":"number","nodeType":"YulLiteral","src":"4612:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4561:3:4"},"nodeType":"YulFunctionCall","src":"4561:54:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4553:4:4"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4047:9:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4058:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4066:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4077:4:4","type":""}],"src":"3945:676:4"},{"body":{"nodeType":"YulBlock","src":"4831:335:4","statements":[{"nodeType":"YulAssignment","src":"4841:27:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4853:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4864:3:4","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4849:3:4"},"nodeType":"YulFunctionCall","src":"4849:19:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4841:4:4"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4884:9:4"},{"name":"value0","nodeType":"YulIdentifier","src":"4895:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4877:6:4"},"nodeType":"YulFunctionCall","src":"4877:25:4"},"nodeType":"YulExpressionStatement","src":"4877:25:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4922:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"4933:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4918:3:4"},"nodeType":"YulFunctionCall","src":"4918:18:4"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4942:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"4950:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4938:3:4"},"nodeType":"YulFunctionCall","src":"4938:31:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4911:6:4"},"nodeType":"YulFunctionCall","src":"4911:59:4"},"nodeType":"YulExpressionStatement","src":"4911:59:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4990:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5001:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4986:3:4"},"nodeType":"YulFunctionCall","src":"4986:18:4"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5010:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"5018:6:4","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5006:3:4"},"nodeType":"YulFunctionCall","src":"5006:19:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4979:6:4"},"nodeType":"YulFunctionCall","src":"4979:47:4"},"nodeType":"YulExpressionStatement","src":"4979:47:4"},{"nodeType":"YulVariableDeclaration","src":"5035:20:4","value":{"kind":"number","nodeType":"YulLiteral","src":"5045:10:4","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5039:2:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5075:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5086:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5071:3:4"},"nodeType":"YulFunctionCall","src":"5071:18:4"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5095:6:4"},{"name":"_1","nodeType":"YulIdentifier","src":"5103:2:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5091:3:4"},"nodeType":"YulFunctionCall","src":"5091:15:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5064:6:4"},"nodeType":"YulFunctionCall","src":"5064:43:4"},"nodeType":"YulExpressionStatement","src":"5064:43:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5127:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5138:3:4","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5123:3:4"},"nodeType":"YulFunctionCall","src":"5123:19:4"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"5148:6:4"},{"name":"_1","nodeType":"YulIdentifier","src":"5156:2:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5144:3:4"},"nodeType":"YulFunctionCall","src":"5144:15:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5116:6:4"},"nodeType":"YulFunctionCall","src":"5116:44:4"},"nodeType":"YulExpressionStatement","src":"5116:44:4"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4768:9:4","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4779:6:4","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4787:6:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4795:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4803:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4811:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4822:4:4","type":""}],"src":"4626:540:4"},{"body":{"nodeType":"YulBlock","src":"5286:229:4","statements":[{"nodeType":"YulAssignment","src":"5296:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5308:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5319:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5304:3:4"},"nodeType":"YulFunctionCall","src":"5304:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5296:4:4"}]},{"body":{"nodeType":"YulBlock","src":"5364:111:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5385:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5392:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5397:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5388:3:4"},"nodeType":"YulFunctionCall","src":"5388:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5378:6:4"},"nodeType":"YulFunctionCall","src":"5378:31:4"},"nodeType":"YulExpressionStatement","src":"5378:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5429:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5432:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5422:6:4"},"nodeType":"YulFunctionCall","src":"5422:15:4"},"nodeType":"YulExpressionStatement","src":"5422:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5457:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5460:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5450:6:4"},"nodeType":"YulFunctionCall","src":"5450:15:4"},"nodeType":"YulExpressionStatement","src":"5450:15:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5344:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"5352:1:4","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5341:2:4"},"nodeType":"YulFunctionCall","src":"5341:13:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5334:6:4"},"nodeType":"YulFunctionCall","src":"5334:21:4"},"nodeType":"YulIf","src":"5331:144:4"},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5491:9:4"},{"name":"value0","nodeType":"YulIdentifier","src":"5502:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5484:6:4"},"nodeType":"YulFunctionCall","src":"5484:25:4"},"nodeType":"YulExpressionStatement","src":"5484:25:4"}]},"name":"abi_encode_tuple_t_enum$_LotteryState_$185__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5255:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5266:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5277:4:4","type":""}],"src":"5171:344:4"},{"body":{"nodeType":"YulBlock","src":"5621:76:4","statements":[{"nodeType":"YulAssignment","src":"5631:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5643:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5654:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5639:3:4"},"nodeType":"YulFunctionCall","src":"5639:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5631:4:4"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5673:9:4"},{"name":"value0","nodeType":"YulIdentifier","src":"5684:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5666:6:4"},"nodeType":"YulFunctionCall","src":"5666:25:4"},"nodeType":"YulExpressionStatement","src":"5666:25:4"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5590:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5601:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5612:4:4","type":""}],"src":"5520:177:4"},{"body":{"nodeType":"YulBlock","src":"5859:162:4","statements":[{"nodeType":"YulAssignment","src":"5869:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5881:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5892:2:4","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5877:3:4"},"nodeType":"YulFunctionCall","src":"5877:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5869:4:4"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5911:9:4"},{"name":"value0","nodeType":"YulIdentifier","src":"5922:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5904:6:4"},"nodeType":"YulFunctionCall","src":"5904:25:4"},"nodeType":"YulExpressionStatement","src":"5904:25:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5949:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"5960:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5945:3:4"},"nodeType":"YulFunctionCall","src":"5945:18:4"},{"name":"value1","nodeType":"YulIdentifier","src":"5965:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5938:6:4"},"nodeType":"YulFunctionCall","src":"5938:34:4"},"nodeType":"YulExpressionStatement","src":"5938:34:4"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5992:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"6003:2:4","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5988:3:4"},"nodeType":"YulFunctionCall","src":"5988:18:4"},{"name":"value2","nodeType":"YulIdentifier","src":"6008:6:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5981:6:4"},"nodeType":"YulFunctionCall","src":"5981:34:4"},"nodeType":"YulExpressionStatement","src":"5981:34:4"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5812:9:4","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5823:6:4","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5831:6:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5839:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5850:4:4","type":""}],"src":"5702:319:4"},{"body":{"nodeType":"YulBlock","src":"6071:230:4","statements":[{"nodeType":"YulAssignment","src":"6081:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6097:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6091:5:4"},"nodeType":"YulFunctionCall","src":"6091:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6081:6:4"}]},{"nodeType":"YulVariableDeclaration","src":"6109:58:4","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6131:6:4"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6147:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"6153:2:4","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6143:3:4"},"nodeType":"YulFunctionCall","src":"6143:13:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6162:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6158:3:4"},"nodeType":"YulFunctionCall","src":"6158:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6139:3:4"},"nodeType":"YulFunctionCall","src":"6139:27:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6127:3:4"},"nodeType":"YulFunctionCall","src":"6127:40:4"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6113:10:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"6242:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6244:16:4"},"nodeType":"YulFunctionCall","src":"6244:18:4"},"nodeType":"YulExpressionStatement","src":"6244:18:4"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6185:10:4"},{"kind":"number","nodeType":"YulLiteral","src":"6197:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6182:2:4"},"nodeType":"YulFunctionCall","src":"6182:34:4"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6221:10:4"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6233:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6218:2:4"},"nodeType":"YulFunctionCall","src":"6218:22:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6179:2:4"},"nodeType":"YulFunctionCall","src":"6179:62:4"},"nodeType":"YulIf","src":"6176:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6280:2:4","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6284:10:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6273:6:4"},"nodeType":"YulFunctionCall","src":"6273:22:4"},"nodeType":"YulExpressionStatement","src":"6273:22:4"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"6051:4:4","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6060:6:4","type":""}],"src":"6026:275:4"},{"body":{"nodeType":"YulBlock","src":"6355:173:4","statements":[{"body":{"nodeType":"YulBlock","src":"6385:111:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6406:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6413:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6418:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6409:3:4"},"nodeType":"YulFunctionCall","src":"6409:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:4"},"nodeType":"YulFunctionCall","src":"6399:31:4"},"nodeType":"YulExpressionStatement","src":"6399:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6450:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6453:4:4","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6443:6:4"},"nodeType":"YulFunctionCall","src":"6443:15:4"},"nodeType":"YulExpressionStatement","src":"6443:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6478:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6481:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6471:6:4"},"nodeType":"YulFunctionCall","src":"6471:15:4"},"nodeType":"YulExpressionStatement","src":"6471:15:4"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6371:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"6374:1:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6368:2:4"},"nodeType":"YulFunctionCall","src":"6368:8:4"},"nodeType":"YulIf","src":"6365:131:4"},{"nodeType":"YulAssignment","src":"6505:17:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6517:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"6520:1:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6513:3:4"},"nodeType":"YulFunctionCall","src":"6513:9:4"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"6505:4:4"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6337:1:4","type":""},{"name":"y","nodeType":"YulTypedName","src":"6340:1:4","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"6346:4:4","type":""}],"src":"6306:222:4"},{"body":{"nodeType":"YulBlock","src":"6571:171:4","statements":[{"body":{"nodeType":"YulBlock","src":"6602:111:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6623:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6630:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6635:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6626:3:4"},"nodeType":"YulFunctionCall","src":"6626:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6616:6:4"},"nodeType":"YulFunctionCall","src":"6616:31:4"},"nodeType":"YulExpressionStatement","src":"6616:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6667:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6670:4:4","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6660:6:4"},"nodeType":"YulFunctionCall","src":"6660:15:4"},"nodeType":"YulExpressionStatement","src":"6660:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6695:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6698:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6688:6:4"},"nodeType":"YulFunctionCall","src":"6688:15:4"},"nodeType":"YulExpressionStatement","src":"6688:15:4"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6591:1:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6584:6:4"},"nodeType":"YulFunctionCall","src":"6584:9:4"},"nodeType":"YulIf","src":"6581:132:4"},{"nodeType":"YulAssignment","src":"6722:14:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6731:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"6734:1:4"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"6727:3:4"},"nodeType":"YulFunctionCall","src":"6727:9:4"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6722:1:4"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6556:1:4","type":""},{"name":"y","nodeType":"YulTypedName","src":"6559:1:4","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"6565:1:4","type":""}],"src":"6533:209:4"},{"body":{"nodeType":"YulBlock","src":"6779:95:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6796:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6803:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6808:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6799:3:4"},"nodeType":"YulFunctionCall","src":"6799:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6789:6:4"},"nodeType":"YulFunctionCall","src":"6789:31:4"},"nodeType":"YulExpressionStatement","src":"6789:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6836:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6839:4:4","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6829:6:4"},"nodeType":"YulFunctionCall","src":"6829:15:4"},"nodeType":"YulExpressionStatement","src":"6829:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6860:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6863:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6853:6:4"},"nodeType":"YulFunctionCall","src":"6853:15:4"},"nodeType":"YulExpressionStatement","src":"6853:15:4"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"6747:127:4"},{"body":{"nodeType":"YulBlock","src":"6911:95:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6928:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6935:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6940:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6931:3:4"},"nodeType":"YulFunctionCall","src":"6931:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6921:6:4"},"nodeType":"YulFunctionCall","src":"6921:31:4"},"nodeType":"YulExpressionStatement","src":"6921:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6968:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6971:4:4","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6961:6:4"},"nodeType":"YulFunctionCall","src":"6961:15:4"},"nodeType":"YulExpressionStatement","src":"6961:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6992:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6995:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6985:6:4"},"nodeType":"YulFunctionCall","src":"6985:15:4"},"nodeType":"YulExpressionStatement","src":"6985:15:4"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6879:127:4"},{"body":{"nodeType":"YulBlock","src":"7043:95:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7060:1:4","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7067:3:4","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7072:10:4","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7063:3:4"},"nodeType":"YulFunctionCall","src":"7063:20:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7053:6:4"},"nodeType":"YulFunctionCall","src":"7053:31:4"},"nodeType":"YulExpressionStatement","src":"7053:31:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7100:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7103:4:4","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7093:6:4"},"nodeType":"YulFunctionCall","src":"7093:15:4"},"nodeType":"YulExpressionStatement","src":"7093:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7124:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7127:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7117:6:4"},"nodeType":"YulFunctionCall","src":"7117:15:4"},"nodeType":"YulExpressionStatement","src":"7117:15:4"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7011:127:4"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let array := allocate_memory(add(and(add(_4, 0x1f), not(31)), _1))\n        mstore(array, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        calldatacopy(add(array, _1), add(_3, _1), _4)\n        mstore(add(add(array, _4), _1), 0)\n        value0 := array\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value1 := dst_1\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        let _1 := 32\n        mstore(add(headStart, _1), 64)\n        let length := mload(value1)\n        mstore(add(headStart, 64), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 96), mload(add(add(value1, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 96), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        let _1 := 0xffffffff\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function abi_encode_tuple_t_enum$_LotteryState_$185__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 2))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := mod(x, y)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":4,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":654},{"length":32,"start":720}],"187":[{"length":32,"start":214},{"length":32,"start":1534}],"193":[{"length":32,"start":1087}],"195":[{"length":32,"start":932}],"197":[{"length":32,"start":970}],"199":[{"length":32,"start":1025}],"209":[{"length":32,"start":557},{"length":32,"start":1358}]},"linkReferences":{},"object":"6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461021e578063c1af578514610251578063f43b52cb14610259578063fd6673f51461026e57600080fd5b80635f1b0fd8146101b55780636b68c03c146101c95780636e04ff0d146101f057600080fd5b806309bc33a7146100c75780631fe543e3146101095780634585e33b1461012b578063460e20491461014b578063473f1ddc1461018357806353a2c19a146101a1575b600080fd5b3480156100d357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561011557600080fd5b506101296101243660046109d4565b610283565b005b34801561013757600080fd5b5061012961014636600461089b565b610310565b34801561015757600080fd5b5061016b6101663660046109a2565b6104ef565b6040516001600160a01b039091168152602001610100565b34801561018f57600080fd5b506002546001600160a01b031661016b565b3480156101ad57600080fd5b5060016100f6565b3480156101c157600080fd5b5060036100f6565b3480156101d557600080fd5b50600254600160a01b900460ff166040516101009190610aec565b3480156101fc57600080fd5b5061021061020b36600461090d565b61051e565b604051610100929190610a8d565b34801561022a57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f6565b6101296105fc565b34801561026557600080fd5b506001546100f6565b34801561027a57600080fd5b506000546100f6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103025760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61030c82826106e7565b5050565b600061032a6040518060200160405280600081525061051e565b5090508061038057600054600254479190600160a01b900460ff16600181111561035657610356610b8c565b6040516312ce08eb60e11b81526004810193909352602483019190915260448201526064016102f9565b60028054600160a01b60ff60a01b199091161790556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff166064820152600160848201526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906109bb565b60405190915081907f87e9e980e89d02ed1bfb229e02562db262b78c5fdfe0404b1b3d333a3fb4c6bd90600090a250505050565b600080828154811061050357610503610ba2565b6000918252602090912001546001600160a01b031692915050565b600060606000600260149054906101000a900460ff16600181111561054557610545610b8c565b600014905060007f00000000000000000000000000000000000000000000000000000000000000006001544261057b9190610b45565b6000549110915015154715158380156105915750825b801561059a5750815b80156105a35750805b604080518615158152851515602082015284151581830152831515606082015290519197507ff038df2b34bb2873c72580d9121c282ca8922e7ff27438145be692480cacc9e3919081900360800190a150505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561063d5760405163b35614e760e01b815260040160405180910390fd5b6000600254600160a01b900460ff16600181111561065d5761065d610b8c565b1461067b57604051637aaa1dfb60e01b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c91a2565b600080548251839083906106fd576106fd610ba2565b602002602001015161070f9190610b6a565b9050600080828154811061072557610725610ba2565b600091825260208083209190910154604080518481529283019081905291516001600160a01b03909116935061075c929190610821565b5042600155600280546001600160a81b0319166001600160a01b0383169081179091556040516000919047908381818185875af1925050503d80600081146107c0576040519150601f19603f3d011682016040523d82523d6000602084013e6107c5565b606091505b50509050806107e65760405162e4a00960e51b815260040160405180910390fd5b6040516001600160a01b038316907fb896f9276cf1b0dbe15c17dd5b14b9dc204c39d78658ea01c3db123fce01118390600090a25050505050565b828054828255906000526020600020908101928215610876579160200282015b8281111561087657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610841565b50610882929150610886565b5090565b5b808211156108825760008155600101610887565b600080602083850312156108ae57600080fd5b823567ffffffffffffffff808211156108c657600080fd5b818501915085601f8301126108da57600080fd5b8135818111156108e957600080fd5b8660208285010111156108fb57600080fd5b60209290920196919550909350505050565b6000602080838503121561092057600080fd5b823567ffffffffffffffff8082111561093857600080fd5b818501915085601f83011261094c57600080fd5b81358181111561095e5761095e610bb8565b610970601f8201601f19168501610b14565b9150808252868482850101111561098657600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156109b457600080fd5b5035919050565b6000602082840312156109cd57600080fd5b5051919050565b600080604083850312156109e757600080fd5b8235915060208084013567ffffffffffffffff80821115610a0757600080fd5b818601915086601f830112610a1b57600080fd5b813581811115610a2d57610a2d610bb8565b8060051b9150610a3e848301610b14565b8181528481019084860184860187018b1015610a5957600080fd5b600095505b83861015610a7c578035835260019590950194918601918601610a5e565b508096505050505050509250929050565b821515815260006020604081840152835180604085015260005b81811015610ac357858101830151858201606001528201610aa7565b81811115610ad5576000606083870101525b50601f01601f191692909201606001949350505050565b6020810160028310610b0e57634e487b7160e01b600052602160045260246000fd5b91905290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3d57610b3d610bb8565b604052919050565b600082821015610b6557634e487b7160e01b600052601160045260246000fd5b500390565b600082610b8757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e8c721c25403cc3182bb633ea68513cfdaf4eaafbed8d90d2ad7aa319625eb7c64736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5F1B0FD8 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0x91AD27B4 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0xF43B52CB EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5F1B0FD8 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x6B68C03C EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x460E2049 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x1A1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D4 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x89B JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x100 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH2 0xF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 PUSH2 0xF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x210 PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x90D JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP3 SWAP2 SWAP1 PUSH2 0xA8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0xF6 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x5FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xF6 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x30C DUP3 DUP3 PUSH2 0x6E7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32A PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x51E JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x380 JUMPI PUSH1 0x0 SLOAD PUSH1 0x2 SLOAD SELFBALANCE SWAP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x356 JUMPI PUSH2 0x356 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12CE08EB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x0 PUSH4 0xFFFFFFFF AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x497 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x9BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP DUP2 SWAP1 PUSH32 0x87E9E980E89D02ED1BFB229E02562DB262B78C5FDFE0404B1B3D333A3FB4C6BD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0xBA2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x545 JUMPI PUSH2 0x545 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x0 EQ SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x57B SWAP2 SWAP1 PUSH2 0xB45 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP2 LT SWAP2 POP ISZERO ISZERO SELFBALANCE ISZERO ISZERO DUP4 DUP1 ISZERO PUSH2 0x591 JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x59A JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x5A3 JUMPI POP DUP1 JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 ISZERO ISZERO DUP2 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE DUP5 ISZERO ISZERO DUP2 DUP4 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP8 POP PUSH32 0xF038DF2B34BB2873C72580D9121C282CA8922E7FF27438145BE692480CACC9E3 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB35614E7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x65D JUMPI PUSH2 0x65D PUSH2 0xB8C JUMP JUMPDEST EQ PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH4 0x7AAA1DFB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE DUP2 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 PUSH32 0x1D64FB5BA9F2548C5B98468D58F25B87B9E866AFEE0122E92D9FE722BF85076C SWAP2 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 MLOAD DUP4 SWAP1 DUP4 SWAP1 PUSH2 0x6FD JUMPI PUSH2 0x6FD PUSH2 0xBA2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x70F SWAP2 SWAP1 PUSH2 0xB6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x725 JUMPI PUSH2 0x725 PUSH2 0xBA2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP3 DUP4 ADD SWAP1 DUP2 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP4 POP PUSH2 0x75C SWAP3 SWAP2 SWAP1 PUSH2 0x821 JUMP JUMPDEST POP TIMESTAMP PUSH1 0x1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xE4A009 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xB896F9276CF1B0DBE15C17DD5B14B9DC204C39D78658EA01C3DB123FCE011183 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x876 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x876 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x841 JUMP JUMPDEST POP PUSH2 0x882 SWAP3 SWAP2 POP PUSH2 0x886 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x887 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x938 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x94C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x95E JUMPI PUSH2 0x95E PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x970 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP6 ADD PUSH2 0xB14 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP7 DUP5 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 ADD DUP6 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA2D JUMPI PUSH2 0xA2D PUSH2 0xBB8 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0xA3E DUP5 DUP4 ADD PUSH2 0xB14 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP12 LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xA7C JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0xA5E JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAC3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0xAA7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAD5 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x60 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0xB0E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB3D JUMPI PUSH2 0xB3D PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xB65 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB87 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xC7 0x21 0xC2 SLOAD SUB 0xCC BALANCE DUP3 0xBB PUSH4 0x3EA68513 0xCF 0xDA DELEGATECALL 0xEA 0xAF 0xBE 0xD8 0xD9 0xD 0x2A 0xD7 0xAA BALANCE SWAP7 0x25 0xEB PUSH29 0x64736F6C63430008070033000000000000000000000000000000000000 ","sourceMap":"472:5356:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4905:93;;;;;;;;;;-1:-1:-1;4978:13:3;4905:93;;;5666:25:4;;;5654:2;5639:18;4905:93:3;;;;;;;;6618:256:0;;;;;;;;;;-1:-1:-1;6618:256:0;;;;;:::i;:::-;;:::i;:::-;;4228:671:3;;;;;;;;;;-1:-1:-1;4228:671:3;;;;;:::i;:::-;;:::i;5004:105::-;;;;;;;;;;-1:-1:-1;5004:105:3;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3156:32:4;;;3138:51;;3126:2;3111:18;5004:105:3;2992:203:4;5115:89:3;;;;;;;;;;-1:-1:-1;5189:8:3;;-1:-1:-1;;;;;5189:8:3;5115:89;;5210:86;;;;;;;;;;-1:-1:-1;1052:1:3;5210:86;;5412:109;;;;;;;;;;-1:-1:-1;1106:1:3;5412:109;;5527:100;;;;;;;;;;-1:-1:-1;5606:14:3;;-1:-1:-1;;;5606:14:3;;;;5527:100;;;;;;:::i;3680:542::-;;;;;;;;;;-1:-1:-1;3680:542:3;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;5739:87::-;;;;;;;;;;-1:-1:-1;5809:10:3;5739:87;;2408:344;;;:::i;5302:104::-;;;;;;;;;;-1:-1:-1;5379:20:3;;5302:104;;5633:100;;;;;;;;;;-1:-1:-1;5684:7:3;5710:16;5633:100;;6618:256:0;6717:10;-1:-1:-1;;;;;6731:14:0;6717:28;;6713:109;;6762:53;;-1:-1:-1;;;6762:53:0;;6788:10;6762:53;;;3412:34:4;-1:-1:-1;;;;;6800:14:0;3482:15:4;3462:18;;;3455:43;3347:18;;6762:53:0;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;4228:671:3:-;4312:17;4335:15;;;;;;;;;;;;;:11;:15::i;:::-;4311:39;;;4365:12;4360:210;;4488:9;:16;4530:14;;4449:21;;4488:16;-1:-1:-1;;;4530:14:3;;;;4522:23;;;;;;;;:::i;:::-;4400:159;;-1:-1:-1;;;4400:159:3;;;;;5904:25:4;;;;5945:18;;;5938:34;;;;5988:18;;;5981:34;5877:18;;4400:159:3;5702:319:4;4360:210:3;4579:14;:40;;-1:-1:-1;;;;;;;4579:40:3;;;;;;4649:195;;-1:-1:-1;;;4649:195:3;;4698:9;4649:195;;;4877:25:4;4721:16:3;4950:18:4;4938:31;4918:18;;;4911:59;1106:1:3;4986:18:4;;;4979:47;4792:18:3;5045:10:4;5091:15;5071:18;;;5064:43;4596:23:3;5123:19:4;;;5116:44;-1:-1:-1;;;;;;;4649:16:3;:35;;;;4849:19:4;;4649:195:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4859:33;;4629:215;;-1:-1:-1;4629:215:3;;4859:33;;;;;4301:598;;4228:671;;:::o;5004:105::-;5060:7;5086:9;5096:5;5086:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;5086:16:3;;5004:105;-1:-1:-1;;5004:105:3:o;3680:542::-;3770:17;3789:12;3831:11;3866:14;;;;;;;;;;;3845:35;;;;;;;;:::i;:::-;:17;:35;3831:49;;3890:18;3954:10;3930:20;;3912:15;:38;;;;:::i;:::-;3974:15;3992:16;3911:53;-1:-1:-1;3911:53:3;-1:-1:-1;3992:20:3;;4040:21;:25;;4090:6;:23;;;;;4100:13;4090:23;:37;;;;;4117:10;4090:37;:51;;;;;4131:10;4090:51;4156:58;;;3741:14:4;;3734:22;3716:41;;3800:14;;3793:22;3788:2;3773:18;;3766:50;3859:14;;3852:22;3832:18;;;3825:50;3918:14;;3911:22;3906:2;3891:18;;3884:50;4156:58:3;;4075:66;;-1:-1:-1;4156:58:3;;;;;;3703:3:4;4156:58:3;;;3821:401;;;;3680:542;;;:::o;2408:344::-;2473:13;2461:9;:25;2457:98;;;2509:35;;-1:-1:-1;;;2509:35:3;;;;;;;;;;;2457:98;2586:17;2568:14;;-1:-1:-1;;;2568:14:3;;;;:35;;;;;;;;:::i;:::-;;2564:98;;2626:25;;-1:-1:-1;;;2626:25:3;;;;;;;;;;;2564:98;2671:9;:35;;;;;;;;;;;;;;-1:-1:-1;;;;;;2671:35:3;2694:10;2671:35;;;;;;2721:24;;2694:10;;2721:24;;;2408:344::o;2758:616::-;2889:21;2930:16;;2913:14;;:11;;2889:21;;2913:14;;;;:::i;:::-;;;;;;;:33;;;;:::i;:::-;2889:57;;2956:22;2981:9;2991:13;2981:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;3027;;;;;;;;;;;;;3015:36;;-1:-1:-1;;;;;2981:24:3;;;;-1:-1:-1;3015:36:3;;2981:24;3027;3015:36;:::i;:::-;-1:-1:-1;3084:15:3;3061:20;:38;3109:14;:34;;-1:-1:-1;;;;;;3153:17:3;-1:-1:-1;;;;;3153:17:3;;;;;;;;3200:45;;-1:-1:-1;;3153:17:3;3219:21;;-1:-1:-1;3200:45:3;-1:-1:-1;3200:45:3;3219:21;3153:17;3200:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3181:64;;;3260:7;3255:71;;3290:25;;-1:-1:-1;;;3290:25:3;;;;;;;;;;;3255:71;3340:27;;-1:-1:-1;;;;;3340:27:3;;;;;;;;2879:495;;;2758:616;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:591:4;84:6;92;145:2;133:9;124:7;120:23;116:32;113:52;;;161:1;158;151:12;113:52;201:9;188:23;230:18;271:2;263:6;260:14;257:34;;;287:1;284;277:12;257:34;325:6;314:9;310:22;300:32;;370:7;363:4;359:2;355:13;351:27;341:55;;392:1;389;382:12;341:55;432:2;419:16;458:2;450:6;447:14;444:34;;;474:1;471;464:12;444:34;519:7;514:2;505:6;501:2;497:15;493:24;490:37;487:57;;;540:1;537;530:12;487:57;571:2;563:11;;;;;593:6;;-1:-1:-1;14:591:4;;-1:-1:-1;;;;14:591:4:o;610:763::-;678:6;709:2;752;740:9;731:7;727:23;723:32;720:52;;;768:1;765;758:12;720:52;808:9;795:23;837:18;878:2;870:6;867:14;864:34;;;894:1;891;884:12;864:34;932:6;921:9;917:22;907:32;;977:7;970:4;966:2;962:13;958:27;948:55;;999:1;996;989:12;948:55;1035:2;1022:16;1057:2;1053;1050:10;1047:36;;;1063:18;;:::i;:::-;1105:53;1148:2;1129:13;;-1:-1:-1;;1125:27:4;1121:36;;1105:53;:::i;:::-;1092:66;;1181:2;1174:5;1167:17;1221:7;1216:2;1211;1207;1203:11;1199:20;1196:33;1193:53;;;1242:1;1239;1232:12;1193:53;1297:2;1292;1288;1284:11;1279:2;1272:5;1268:14;1255:45;1341:1;1320:14;;;1316:23;;;1309:34;;;;-1:-1:-1;1324:5:4;610:763;-1:-1:-1;;;610:763:4:o;1378:180::-;1437:6;1490:2;1478:9;1469:7;1465:23;1461:32;1458:52;;;1506:1;1503;1496:12;1458:52;-1:-1:-1;1529:23:4;;1378:180;-1:-1:-1;1378:180:4:o;1563:184::-;1633:6;1686:2;1674:9;1665:7;1661:23;1657:32;1654:52;;;1702:1;1699;1692:12;1654:52;-1:-1:-1;1725:16:4;;1563:184;-1:-1:-1;1563:184:4:o;1752:1025::-;1845:6;1853;1906:2;1894:9;1885:7;1881:23;1877:32;1874:52;;;1922:1;1919;1912:12;1874:52;1958:9;1945:23;1935:33;;1987:2;2040;2029:9;2025:18;2012:32;2063:18;2104:2;2096:6;2093:14;2090:34;;;2120:1;2117;2110:12;2090:34;2158:6;2147:9;2143:22;2133:32;;2203:7;2196:4;2192:2;2188:13;2184:27;2174:55;;2225:1;2222;2215:12;2174:55;2261:2;2248:16;2283:2;2279;2276:10;2273:36;;;2289:18;;:::i;:::-;2335:2;2332:1;2328:10;2318:20;;2358:28;2382:2;2378;2374:11;2358:28;:::i;:::-;2420:15;;;2451:12;;;;2483:11;;;2513;;;2509:20;;2506:33;-1:-1:-1;2503:53:4;;;2552:1;2549;2542:12;2503:53;2574:1;2565:10;;2584:163;2598:2;2595:1;2592:9;2584:163;;;2655:17;;2643:30;;2616:1;2609:9;;;;;2693:12;;;;2725;;2584:163;;;2588:3;2766:5;2756:15;;;;;;;;1752:1025;;;;;:::o;3945:676::-;4128:6;4121:14;4114:22;4103:9;4096:41;4077:4;4156:2;4194;4189;4178:9;4174:18;4167:30;4226:6;4220:13;4269:6;4264:2;4253:9;4249:18;4242:34;4294:1;4304:140;4318:6;4315:1;4312:13;4304:140;;;4413:14;;;4409:23;;4403:30;4379:17;;;4398:2;4375:26;4368:66;4333:10;;4304:140;;;4462:6;4459:1;4456:13;4453:91;;;4532:1;4527:2;4518:6;4507:9;4503:22;4499:31;4492:42;4453:91;-1:-1:-1;4605:2:4;4584:15;-1:-1:-1;;4580:29:4;4565:45;;;;4612:2;4561:54;;3945:676;-1:-1:-1;;;;3945:676:4:o;5171:344::-;5319:2;5304:18;;5352:1;5341:13;;5331:144;;5397:10;5392:3;5388:20;5385:1;5378:31;5432:4;5429:1;5422:15;5460:4;5457:1;5450:15;5331:144;5484:25;;;5171:344;:::o;6026:275::-;6097:2;6091:9;6162:2;6143:13;;-1:-1:-1;;6139:27:4;6127:40;;6197:18;6182:34;;6218:22;;;6179:62;6176:88;;;6244:18;;:::i;:::-;6280:2;6273:22;6026:275;;-1:-1:-1;6026:275:4:o;6306:222::-;6346:4;6374:1;6371;6368:8;6365:131;;;6418:10;6413:3;6409:20;6406:1;6399:31;6453:4;6450:1;6443:15;6481:4;6478:1;6471:15;6365:131;-1:-1:-1;6513:9:4;;6306:222::o;6533:209::-;6565:1;6591;6581:132;;6635:10;6630:3;6626:20;6623:1;6616:31;6670:4;6667:1;6660:15;6698:4;6695:1;6688:15;6581:132;-1:-1:-1;6727:9:4;;6533:209::o;6747:127::-;6808:10;6803:3;6799:20;6796:1;6789:31;6839:4;6836:1;6829:15;6863:4;6860:1;6853:15;6879:127;6940:10;6935:3;6931:20;6928:1;6921:31;6971:4;6968:1;6961:15;6995:4;6992:1;6985:15;7011:127;7072:10;7067:3;7063:20;7060:1;7053:31;7103:4;7100:1;7093:15;7127:4;7124:1;7117:15"},"gasEstimates":{"creation":{"codeDepositCost":"615200","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterLottery()":"infinite","getEntranceFee()":"infinite","getInterval()":"infinite","getLatestTimestamp()":"2347","getLotteryState()":"2395","getNumWords()":"292","getNumberOfPlayers()":"2369","getPlayers(uint256)":"4686","getRecentWinner()":"2420","getRequestConfirmations()":"204","performUpkeep(bytes)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterLottery()":"c1af5785","getEntranceFee()":"09bc33a7","getInterval()":"91ad27b4","getLatestTimestamp()":"f43b52cb","getLotteryState()":"6b68c03c","getNumWords()":"53a2c19a","getNumberOfPlayers()":"fd6673f5","getPlayers(uint256)":"460e2049","getRecentWinner()":"473f1ddc","getRequestConfirmations()":"5f1b0fd8","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHToBuyATicket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Lottery__PerformUpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__StateIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"LotteryRequestedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"LotteryWinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"timeHasPassed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPlayers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasBalance\",\"type\":\"bool\"}],\"name\":\"UpkeepNeeded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefania Pozzi\",\"details\":\"Chainlink VRF V2, Keepers \",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Chainlink keeper implementation Chainlink nodes checks if upkeepNeeded is true 1. Time is passed 2. Lottery is not computating 3. More than 1 player and Lottery contract must have positive balance 4. LINK in subscription balance for VRF\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract accepts an user buying a ticket. Then, every 30 seconds it selects a random winner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/test/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n/**\\n * @author Stefania Pozzi\\n * @notice This contract accepts an user buying a ticket.\\n * Then, every 30 seconds\\n * it selects a random winner\\n * @dev Chainlink VRF V2, Keepers\\n * */\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Types */\\n    enum LotteryState {\\n        OPEN,\\n        PROCESSING\\n    }\\n\\n    /* State variables */\\n    uint256 private immutable i_entranceFee; //why not immutable but storage\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private s_lastBlockTimestamp;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\n    uint256 private immutable i_interval;\\n\\n    /* Contract Variables */\\n    address private s_winner;\\n    LotteryState private s_lotteryState;\\n\\n    /* Errors and Events */\\n    error Lottery__NotEnoughETHToBuyATicket();\\n    error Lottery__TransferFailed();\\n    error Lottery__StateIsNotOpen();\\n    error Lottery__PerformUpkeepNotNeeded(uint256 balance, uint256 numPlayers, uint256 state);\\n\\n    event LotteryEnter(address indexed player);\\n    event LotteryRequestedWinner(uint256 indexed requestId);\\n    event LotteryWinnerPicked(address indexed winner);\\n    event UpkeepNeeded(bool isOpen,bool timeHasPassed,bool hasPlayers,bool hasBalance);\\n\\n    constructor(\\n        address vrfCoordinatorV2, //external contract: deploying mock\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState(0); //or LotteryState.OPEN\\n        s_lastBlockTimestamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughETHToBuyATicket();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__StateIsNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable winner = s_players[indexOfWinner];\\n        s_players = new address payable[](0);\\n        s_lastBlockTimestamp = block.timestamp;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_winner = winner;\\n\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit LotteryWinnerPicked(winner);\\n    }\\n\\n    /**\\n     * @dev Chainlink keeper implementation\\n     * Chainlink nodes checks if upkeepNeeded is true\\n     * 1. Time is passed\\n     * 2. Lottery is not computating\\n     * 3. More than 1 player and Lottery contract must have positive balance\\n     * 4. LINK in subscription balance for VRF\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\\n        bool timeHasPassed = (block.timestamp - s_lastBlockTimestamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = isOpen && timeHasPassed && hasPlayers && hasBalance;\\n        emit UpkeepNeeded(isOpen,timeHasPassed, hasPlayers, hasBalance);\\n\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__PerformUpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.PROCESSING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATION,\\n            uint32(i_callbackGasLimit),\\n            NUM_WORDS\\n        );\\n        emit LotteryRequestedWinner(requestId);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_winner;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return s_lastBlockTimestamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATION;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x7fb7a1349ddbe5e4527f0a5b695ae9f25e6639f151a305fb2e8a3594aac98e2f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":190,"contract":"contracts/test/Lottery.sol:Lottery","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":201,"contract":"contracts/test/Lottery.sol:Lottery","label":"s_lastBlockTimestamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":211,"contract":"contracts/test/Lottery.sol:Lottery","label":"s_winner","offset":0,"slot":"2","type":"t_address"},{"astId":214,"contract":"contracts/test/Lottery.sol:Lottery","label":"s_lotteryState","offset":20,"slot":"2","type":"t_enum(LotteryState)185"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(LotteryState)185":{"encoding":"inplace","label":"enum Lottery.LotteryState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"This contract accepts an user buying a ticket. Then, every 30 seconds it selects a random winner","version":1}}}}}}